{"version":3,"file":"UpdateProblemLec-Z6gQcygw.js","sources":["../../src/pages/Problem/ProblemLecture/Update/Header.jsx","../../src/pages/Problem/ProblemLecture/Update/BottomTabs.jsx","../../src/pages/Problem/ProblemLecture/Update/basic-info-step.jsx","../../src/pages/Problem/ProblemLecture/Update/TestCaseGen.jsx","../../src/pages/Problem/ProblemLecture/Update/CodeEditor.jsx","../../src/pages/Problem/ProblemLecture/Update/Template.jsx","../../src/pages/Problem/ProblemLecture/Update/FormTabs.jsx","../../src/pages/Problem/ProblemLecture/Update/UpdateProblemLec.jsx"],"sourcesContent":["import { ArrowLeft } from 'lucide-react';\r\nimport { useNavigate } from '@tanstack/react-router'\r\n\r\nexport default function Header({ courseId }) {\r\n  const navigate = useNavigate()\r\n  return (\r\n    <header className=\"sticky top-0 left-0 right-0 bg-white border-b border-gray-200 z-1\">\r\n      <div className=\"max-w-4xl mx-auto px-4 h-14 flex items-center justify-between\">\r\n        <div className=\"flex items-center space-x-4\">\r\n          <button className=\"text-black flex items-center hover:text-purple-700\" onClick={() => navigate({ to: `/edit-curriculum-course/${courseId}` })}>\r\n            <ArrowLeft className=\"h-5 w-5 mr-2\" />\r\n            <span>Back To Curriculum</span>\r\n          </button>\r\n        </div>       \r\n      </div>\r\n    </header>\r\n  );\r\n}","import { FileText, Code, BookOpen, ArrowLeft, ArrowRight, Loader2 } from 'lucide-react'\r\nimport { Button } from '@/components/ui/button'\r\nimport { useState } from 'react'\r\nimport { ControlledAlertDialog } from '@/components/alert/ControlledAlertDialog'\r\n\r\nconst tabs = [\r\n  { id: 'basic', label: 'Basic Info', icon: FileText },\r\n  { id: 'code', label: 'Code', icon: Code },\r\n  { id: 'description', label: 'Template', icon: BookOpen }\r\n]\r\n\r\nexport default function BottomTabs({ activeTab, setActiveTab, isSaveTemplate, isRunSuccess, isLoadingSubmit }) {\r\n  const currentTabIndex = tabs.findIndex((tab) => tab.id === activeTab)\r\n  const isLastTab = currentTabIndex === tabs.length - 1\r\n  const isFirstTab = currentTabIndex === 0\r\n\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false)\r\n\r\n  const openDialog = () => setIsDialogOpen(true)\r\n  const closeDialog = () => setIsDialogOpen(false)\r\n  const handleConfirm = () => {\r\n    closeDialog()\r\n  }\r\n\r\n  const handlePrevious = () => {\r\n    if (!isFirstTab) {\r\n      setActiveTab(tabs[currentTabIndex - 1].id)\r\n    }\r\n  }\r\n\r\n  const handleNext = () => {\r\n    if (!isLastTab) {\r\n      setActiveTab(tabs[currentTabIndex + 1].id)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className='sticky bottom-0 left-0 right-0 bg-white border-t border-gray-200'>\r\n      <div className='max-w-4xl mx-auto px-4'>\r\n        <div className='flex justify-between items-center h-16'>\r\n          <Button\r\n            type='button'\r\n            variant='ghost'\r\n            onClick={handlePrevious}\r\n            disabled={isFirstTab}\r\n            className='flex items-center'\r\n          >\r\n            <ArrowLeft className='h-4 w-4 mr-2' />\r\n            Previous\r\n          </Button>\r\n\r\n          <div className='flex justify-center space-x-4'>\r\n            {tabs.map((tab) => {\r\n              const Icon = tab.icon\r\n              return (\r\n                <button\r\n                  type='button'\r\n                  key={tab.id}\r\n                  className={`\r\n          flex flex-row items-center justify-center px-4 relative\r\n          ${activeTab === tab.id ? 'text-purple-600' : 'text-gray-600 hover:text-gray-900'}\r\n        `}\r\n                >\r\n                  <Icon className='h-5 w-5 mr-2' />\r\n                  <span className='text-xs'>{tab.label}</span>\r\n                </button>\r\n              )\r\n            })}\r\n          </div>\r\n\r\n          {isLastTab && (\r\n            <>\r\n              {isLoadingSubmit ? (\r\n                <>\r\n                  <Button type='button' disabled={isLoadingSubmit}>\r\n                    <Loader2 className='mr-2 h-4 w-4 animate-spin' />\r\n                    Submitting...\r\n                  </Button>\r\n                </>\r\n              ) : (\r\n                <Button\r\n                  disabled={isSaveTemplate === false}\r\n                  type='submit'\r\n                  variant='default'\r\n                  className='flex items-center'\r\n                >\r\n                  Submit\r\n                </Button>\r\n              )}\r\n            </>\r\n          )}\r\n\r\n          {!isLastTab && (\r\n            <Button\r\n              type='button'\r\n              variant='ghost'\r\n              onClick={isRunSuccess === false && activeTab === 'code' ? openDialog : handleNext}\r\n              className='flex items-center'\r\n            >\r\n              Next\r\n              <ArrowRight className='h-4 w-4 ml-2' />\r\n            </Button>\r\n          )}\r\n        </div>\r\n      </div>\r\n      <ControlledAlertDialog\r\n        isOpen={isDialogOpen}\r\n        onClose={closeDialog}\r\n        onConfirm={handleConfirm}\r\n        title='Check the code again!'\r\n        description='You need to run the code and test case successfully before coming to the next step.'\r\n      />\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { FormField, FormItem, FormLabel, FormControl, FormMessage } from '@/components/ui/form'\r\nimport { Input } from '@/components/ui/input'\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'\r\nimport MarkdownFormField from '@/components/markdown-form-field'\r\nimport { Switch } from '@/components/ui/switch'\r\n\r\nexport default function BasicInfoStep({ form }) {\r\n  return (\r\n    <div className='max-w-5xl mx-auto'>\r\n      <h1 className='mb-6 text-3xl font-semibold'>Create Code Problem - Basic Info</h1>\r\n      <div className='mb-6'>\r\n        <FormField\r\n          control={form.control}\r\n          name='title'\r\n          render={({ field }) => (\r\n            <FormItem>\r\n              <FormLabel className='text-base font-semibold'>Title</FormLabel>\r\n              <FormControl>\r\n                <Input placeholder='Enter problem title' {...field} />\r\n              </FormControl>\r\n              <FormMessage />\r\n            </FormItem>\r\n          )}\r\n        />\r\n      </div>\r\n      <MarkdownFormField\r\n        control={form.control}\r\n        name='description'\r\n        label='Description'\r\n        placeholder='Enter problem description'\r\n      />\r\n\r\n      <div className='grid grid-cols-1 md:grid-cols-3 gap-4 mt-6'>\r\n        {/* Language Dropdown */}\r\n        {/* <FormField\r\n          control={form.control}\r\n          name='language'\r\n          render={({ field }) => (\r\n            <FormItem>\r\n              <FormLabel className='text-base font-semibold'>Code Language</FormLabel>\r\n              <Select onValueChange={field.onChange} defaultValue={field.value || 'Java'}>\r\n                <FormControl>\r\n                  <SelectTrigger>\r\n                    <SelectValue placeholder='Select a language' />\r\n                  </SelectTrigger>\r\n                </FormControl>\r\n                <SelectContent>\r\n                  <SelectItem value='Java'>Java</SelectItem>\r\n                  <SelectItem value='csharp'>C#</SelectItem>\r\n                  <SelectItem value='python'>Python</SelectItem>\r\n                  <SelectItem value='c'>C</SelectItem>\r\n                  <SelectItem value='cpp'>C++</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n              <FormMessage />\r\n            </FormItem>\r\n          )}\r\n        /> */}\r\n\r\n        {/* Difficulty Type Dropdown */}\r\n        <FormField\r\n          control={form.control}\r\n          name='difficultyType'\r\n          render={({ field }) => (\r\n            <FormItem>\r\n              <FormLabel className='text-base font-semibold'>Difficulty Type</FormLabel>\r\n              <Select onValueChange={field.onChange} defaultValue={field.value || 'Medium'}>\r\n                <FormControl>\r\n                  <SelectTrigger>\r\n                    <SelectValue placeholder='Select difficulty type' />\r\n                  </SelectTrigger>\r\n                </FormControl>\r\n                <SelectContent>\r\n                  <SelectItem value='Easy'>Easy</SelectItem>\r\n                  <SelectItem value='Medium'>Medium</SelectItem>\r\n                  <SelectItem value='Hard'>Hard</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n              <FormMessage />\r\n            </FormItem>\r\n          )}\r\n        />\r\n\r\n        {/* CPU Time Limit */}\r\n        <FormField\r\n          control={form.control}\r\n          name='cpuTimeLimit'\r\n          render={({ field }) => (\r\n            <FormItem>\r\n              <FormLabel className='text-base font-semibold'>CPU Time Limit</FormLabel>\r\n              <FormControl>\r\n                <Input\r\n                  min={0.1}\r\n                  max={20}\r\n                  type='number'\r\n                  step='0.1'\r\n                  placeholder='Enter CPU Time Limit'\r\n                  {...field}\r\n                  value={field.value || 2}\r\n                />\r\n              </FormControl>\r\n              <FormMessage />\r\n            </FormItem>\r\n          )}\r\n        />\r\n\r\n        {/* CPU Extra Time */}\r\n        <FormField\r\n          control={form.control}\r\n          name='cpuExtraTime'\r\n          render={({ field }) => (\r\n            <FormItem>\r\n              <FormLabel className='text-base font-semibold'>CPU Extra Time</FormLabel>\r\n              <FormControl>\r\n                <Input\r\n                  min={0}\r\n                  max={5}\r\n                  type='number'\r\n                  step='0.1'\r\n                  placeholder='Enter CPU Extra Time'\r\n                  {...field}\r\n                  value={field.value || 2.5}\r\n                />\r\n              </FormControl>\r\n              <FormMessage />\r\n            </FormItem>\r\n          )}\r\n        />\r\n\r\n        {/* Memory Limit */}\r\n        <FormField\r\n          control={form.control}\r\n          name='memoryLimit'\r\n          render={({ field }) => (\r\n            <FormItem>\r\n              <FormLabel className='text-base font-semibold'>Memory Limit (MB)</FormLabel>\r\n              <FormControl>\r\n                <Input\r\n                  min={50}\r\n                  max={500}\r\n                  type='number'\r\n                  step='1'\r\n                  placeholder='Enter Memory Limit'\r\n                  {...field}\r\n                  value={field.value || 250}\r\n                />\r\n              </FormControl>\r\n              <FormMessage />\r\n            </FormItem>\r\n          )}\r\n        />\r\n\r\n        {/* Stack Limit */}\r\n        <FormField\r\n          control={form.control}\r\n          name='stackLimit'\r\n          render={({ field }) => (\r\n            <FormItem>\r\n              <FormLabel className='text-base font-semibold'>Stack Limit (MB)</FormLabel>\r\n              <FormControl>\r\n                <Input\r\n                  min={30}\r\n                  max={125}\r\n                  type='number'\r\n                  step='1'\r\n                  placeholder='Enter Stack Limit'\r\n                  {...field}\r\n                  value={field.value || 64}\r\n                />\r\n              </FormControl>\r\n              <FormMessage />\r\n            </FormItem>\r\n          )}\r\n        />\r\n\r\n        {/* Max Thread */}\r\n        <FormField\r\n          control={form.control}\r\n          name='maxThread'\r\n          render={({ field }) => (\r\n            <FormItem>\r\n              <FormLabel className='text-base font-semibold'>Max Thread</FormLabel>\r\n              <FormControl>\r\n                <Input\r\n                  min={20}\r\n                  max={120}\r\n                  type='number'\r\n                  step='0.1'\r\n                  placeholder='Enter Max Thread'\r\n                  {...field}\r\n                  value={field.value || 70}\r\n                />\r\n              </FormControl>\r\n              <FormMessage />\r\n            </FormItem>\r\n          )}\r\n        />\r\n\r\n        {/* Max File Size */}\r\n        <FormField\r\n          control={form.control}\r\n          name='maxFileSize'\r\n          render={({ field }) => (\r\n            <FormItem>\r\n              <FormLabel className='text-base font-semibold'>Max File Size (MB)</FormLabel>\r\n              <FormControl>\r\n                <Input\r\n                  min={1}\r\n                  max={20}\r\n                  type='number'\r\n                  step='1'\r\n                  placeholder='Enter Max File Size'\r\n                  {...field}\r\n                  value={field.value || 10}\r\n                />\r\n              </FormControl>\r\n              <FormMessage />\r\n            </FormItem>\r\n          )}\r\n        />\r\n\r\n        <div></div>\r\n\r\n        {/* Enable Network Toggle */}\r\n        <FormField\r\n          control={form.control}\r\n          name='enableNetwork'\r\n          render={({ field }) => (\r\n            <FormItem>\r\n              <div className='flex items-center'>\r\n                <FormLabel className='text-base font-semibold'>Enable Network</FormLabel>\r\n                <FormControl>\r\n                  <Switch\r\n                    className='ml-2'\r\n                    checked={field.value}\r\n                    defaultChecked={false}\r\n                    onCheckedChange={field.onChange}\r\n                  />\r\n                </FormControl>\r\n              </div>\r\n              <FormMessage />\r\n            </FormItem>\r\n          )}\r\n        />\r\n\r\n        {/* Is Active Toggle */}\r\n        <FormField\r\n          control={form.control}\r\n          name='isActive'\r\n          render={({ field }) => (\r\n            <FormItem>\r\n              <div className='flex items-center'>\r\n                <FormLabel className='text-base font-semibold'>Is Active</FormLabel>\r\n                <FormControl>\r\n                  <Switch\r\n                    className='ml-2'\r\n                    checked={field.value}\r\n                    defaultChecked={true}\r\n                    onCheckedChange={field.onChange}\r\n                  />\r\n                </FormControl>\r\n              </div>\r\n              <FormMessage />\r\n            </FormItem>\r\n          )}\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","'use client'\r\n\r\nimport React, { useState, useEffect } from 'react'\r\nimport { Button } from '@/components/ui/button'\r\nimport { Input } from '@/components/ui/input'\r\nimport { Label } from '@/components/ui/label'\r\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from '@/components/ui/card'\r\nimport { Textarea } from '@/components/ui/textarea'\r\nimport { Badge } from '@/components/ui/badge'\r\nimport { Plus, X } from 'lucide-react'\r\nimport { Switch } from '@/components/ui/switch'\r\n\r\nconst TestCaseGen = ({ testCases, setTestCases }) => {\r\n  const [params, setParams] = useState([])\r\n  const [newParam, setNewParam] = useState('')\r\n  const [previewInput, setPreviewInput] = useState('')\r\n  const [previewOutput, setPreviewOutput] = useState('')\r\n\r\n  console.log(testCases)\r\n\r\n  useEffect(() => {\r\n    if (testCases && testCases.length > 0) {\r\n      const extractedParams = Object.keys(testCases[0]).filter(key => key !== 'expectedOutput' && key !== 'isHidden' && key !== 'id');\r\n      setParams(extractedParams);\r\n    }\r\n  }, [testCases]);\r\n\r\n  const addParam = () => {\r\n    if (newParam && !params.includes(newParam)) {\r\n      setParams([...params, newParam])\r\n      setNewParam('')\r\n    }\r\n  }\r\n\r\n  const removeParam = (param) => {\r\n    setParams(params.filter((p) => p !== param))\r\n    setTestCases(\r\n      testCases.map((testCase) => {\r\n        const { [param]: removed, ...rest } = testCase\r\n        return rest\r\n      })\r\n    )\r\n  }\r\n\r\n  const createTestCase = () => {\r\n    const newTestCase = params.reduce((acc, param) => {\r\n      acc[param] = ''\r\n      return acc\r\n    }, {})\r\n    setTestCases([...testCases, { ...newTestCase, expectedOutput: 'N/A', isHidden: false  }])\r\n  }\r\n\r\n  const updateTestCaseValue = (testCaseIndex, param, value) => {\r\n    const updatedTestCases = [...testCases]\r\n    updatedTestCases[testCaseIndex][param] = value\r\n    setTestCases(updatedTestCases)\r\n  }\r\n\r\n  const updateExpectedOutput = (testCaseIndex, value) => {\r\n    const updatedTestCases = [...testCases]\r\n    updatedTestCases[testCaseIndex].expectedOutput = value\r\n    setTestCases(updatedTestCases)\r\n  }\r\n\r\n  const removeTestCase = (index) => {\r\n    setTestCases(testCases.filter((_, i) => i !== index))\r\n  }\r\n\r\n  const toggleTestCaseHidden = (index) => {\r\n    const updatedTestCases = [...testCases]\r\n    updatedTestCases[index].isHidden = !updatedTestCases[index].isHidden\r\n    setTestCases(updatedTestCases)\r\n  }\r\n\r\n  useEffect(() => {\r\n    // Update Preview Input\r\n    const input = testCases.flatMap((testCase) => params.map((param) => `${testCase[param]}`)).join('\\n')\r\n    setPreviewInput(input)\r\n\r\n    // Update Preview Output\r\n    const output = JSON.stringify(\r\n      testCases.map((testCase) => ({\r\n        Output: testCase.expectedOutput,\r\n        Stdout: ''\r\n      })),\r\n      null,\r\n      2\r\n    )\r\n    setPreviewOutput(output)\r\n  }, [testCases, params])\r\n\r\n  const createTestCaseNoParam = () => {\r\n    setTestCases([...testCases, { expectedOutput: '', isHidden: false }])\r\n  }\r\n\r\n  return (\r\n    <Card className='w-full mx-auto'>\r\n      <div className='flex justify-center'>\r\n        <CardHeader>\r\n          <CardTitle className='text-center text-2xl font-semibold'>Test Case Generator</CardTitle>\r\n        </CardHeader>\r\n      </div>\r\n      <CardFooter className='flex flex-col items-stretch gap-4'>\r\n        <div className='grid grid-cols-3 gap-4'>\r\n          <div className={`col-span-2 grid  ${testCases.length === 0 ? 'rounded-xl border-2 border-dashed border-gray-300 flex items-center justify-center' : 'grid-cols-2 gap-4'}`}>\r\n            {testCases.length === 0 && <p className='text-center text-gray-500 w-full font-semibold'>No test cases created yet.</p>}\r\n            {testCases.map((testCase, testCaseIndex) => {\r\n              const { id, ...displayTestCase } = testCase; // Loại bỏ 'id' khi hiển thị\r\n              return (\r\n                <Card key={id || testCaseIndex} className='w-full mb-4'>\r\n                  <CardHeader className='flex flex-row items-center justify-between space-y-0 pb-2'>\r\n                    <CardTitle className='text-sm font-semibold'>Test Case {testCaseIndex + 1}</CardTitle>\r\n                    <div className=\"flex items-center space-x-2\">\r\n                      <div className=\"flex items-center space-x-2\">\r\n                        <Label htmlFor={`hidden-toggle-${testCaseIndex}`}>Hidden</Label>\r\n                        <Switch\r\n                          id={`hidden-toggle-${testCaseIndex}`}\r\n                          checked={testCase.isHidden}\r\n                          onCheckedChange={() => toggleTestCaseHidden(testCaseIndex)}\r\n                        />\r\n                      </div>\r\n                      <Button\r\n                        variant=\"ghost\"\r\n                        size=\"sm\"\r\n                        onClick={() => removeTestCase(testCaseIndex)}\r\n                      >\r\n                        <X className=\"h-4 w-4\" />\r\n                      </Button>\r\n                    </div>\r\n                  </CardHeader>\r\n                  <CardContent>\r\n                    {Object.entries(displayTestCase).map(([param, value]) => (\r\n                      param !== 'expectedOutput' && param !== 'isHidden' && (\r\n                        <div key={param} className=\"flex items-center gap-2 mb-2\">\r\n                          <Label htmlFor={`${testCaseIndex}-${param}`} className=\"w-1/3\">\r\n                            <Badge variant=\"outline\" className=\"mr-2\">{param}</Badge>\r\n                          </Label>\r\n                          <Input\r\n                            id={`${testCaseIndex}-${param}`}\r\n                            value={value}\r\n                            onChange={(e) => updateTestCaseValue(testCaseIndex, param, e.target.value)}\r\n                            className=\"w-2/3\"\r\n                          />\r\n                        </div>\r\n                      )\r\n                    ))}\r\n                    <div className=\"flex items-center gap-2 mb-2\">\r\n                      <Label htmlFor={`${testCaseIndex}-expectedOutput`} className=\"w-1/3\">\r\n                        <Badge variant=\"outline\" className=\"mr-2\">Expected Output</Badge>\r\n                      </Label>\r\n                      <Input\r\n                        id={`${testCaseIndex}-expectedOutput`}\r\n                        value={testCase.expectedOutput}\r\n                        onChange={(e) => updateExpectedOutput(testCaseIndex, e.target.value)}\r\n                        className=\"w-2/3\"\r\n                      />\r\n                    </div>\r\n                  </CardContent>\r\n                </Card>\r\n              );\r\n            })}\r\n          </div>\r\n          <div>\r\n            <Card className='w-full mb-4'>\r\n              <CardContent className='space-y-4'>\r\n                <div className='flex gap-2 mt-4'>\r\n                  <Input\r\n                    placeholder='Enter parameter name'\r\n                    value={newParam}\r\n                    onChange={(e) => setNewParam(e.target.value)}\r\n                    onKeyDown={(e) => {\r\n                      if (e.key === 'Enter') {\r\n                        e.preventDefault();\r\n                        addParam(); \r\n                      }\r\n                    }}\r\n                  />\r\n                  <Button type='button' onClick={addParam} className='flex-shrink-0'>\r\n                    <Plus className='w-4 h-4 mr-2' />\r\n                    Add Param\r\n                  </Button>\r\n                </div>\r\n                <div className='flex flex-wrap gap-2'>\r\n                  {params.map((param) => (\r\n                    <div key={param} className='flex items-center bg-gray-100 rounded-full px-3 py-1'>\r\n                      <span>{param}</span>\r\n                      <Button variant='ghost' size='sm' className='ml-2 p-0 h-auto' onClick={() => removeParam(param)}>\r\n                        <X className='w-4 h-4' />\r\n                      </Button>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </CardContent>\r\n              <CardFooter>\r\n                <Button type='button' onClick={createTestCase} disabled={params.length === 0} className='w-fit'>\r\n                  Create Test Case\r\n                </Button>\r\n                <Button type='button' onClick={createTestCaseNoParam} className='w-fit ml-2'>\r\n                  Create No Parameters\r\n                </Button>\r\n              </CardFooter>\r\n            </Card>\r\n            <Card className='w-full mb-4'>\r\n              <CardHeader>\r\n                <CardTitle>Preview Input</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <Textarea value={previewInput} readOnly className='w-full h-40' />\r\n              </CardContent>\r\n            </Card>\r\n            <Card className='w-full'>\r\n              <CardHeader>\r\n                <CardTitle>Preview Output</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <Textarea value={previewOutput} readOnly className='w-full h-40' />\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n        </div>\r\n      </CardFooter>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default React.memo(TestCaseGen)\r\n","'use client'\r\n\r\nimport * as React from 'react'\r\nimport {\r\n  Code,\r\n  TestTube2,\r\n  Plus,\r\n  X,\r\n  Play,\r\n  ChevronDown,\r\n  CircleX,\r\n  CircleCheck,\r\n  XCircle,\r\n  CheckCircle2,\r\n  Loader2\r\n} from 'lucide-react'\r\nimport Editor from '@monaco-editor/react'\r\n\r\nimport { Button } from '@/components/ui/button'\r\nimport { Card, CardHeader, CardTitle } from '@/components/ui/card'\r\nimport { ResizableHandle, ResizablePanel, ResizablePanelGroup } from '@/components/ui/resizable'\r\nimport { ScrollArea } from '@/components/ui/scroll-area'\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\r\nimport { Input } from '@/components/ui/input'\r\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu'\r\nimport { useToast } from '@/hooks/use-toast'\r\nimport { runCode } from '@/services/api/codeApi'\r\nimport { reverseTransformTestScript, transformTestCases, transformTestCasesUpdate, transformTestScriptUpdate } from '@/lib/utils'\r\nimport TestResultLoading from '@/components/loading/TestResultLoading'\r\nimport { ToastAction } from '@/components/ui/toast'\r\nimport TestCaseGen from './TestCaseGen'\r\n\r\nconst TestCaseSelector = ({ testCases, selectedIndex, onSelect, failedTestCases = [] }) => (\r\n  <div className='flex items-center gap-2 flex-wrap'>\r\n    {testCases.map((_, index) => (\r\n      <Button\r\n        key={index}\r\n        type='button'\r\n        variant={selectedIndex === index ? 'default' : 'outline'}\r\n        className={`${\r\n          failedTestCases.includes(index)\r\n            ? 'bg-red-100 hover:bg-red-200 text-red-700'\r\n            : 'bg-emerald-100 hover:bg-emerald-200 text-emerald-700'\r\n        } ${selectedIndex === index ? 'border-2 border-emerald-500' : ''}`}\r\n        onClick={() => onSelect(index)}\r\n      >\r\n        Case {index + 1}\r\n      </Button>\r\n    ))}\r\n  </div>\r\n)\r\n\r\nconst TestCaseDisplay = ({ result }) => (\r\n  <div className='space-y-4'>\r\n    <div>\r\n      <div className='text-sm text-muted-foreground mb-2'>Inputs:</div>\r\n      {Object.entries(result.inputs).map(([key, value]) => (\r\n        <div key={key} className='mb-2'>\r\n          <div className='text-sm text-muted-foreground'>{key} =</div>\r\n          <Input className='font-mono bg-muted' value={value} readOnly />\r\n        </div>\r\n      ))}\r\n    </div>\r\n    <div>\r\n      <div className='text-sm text-muted-foreground mb-2'>Expected Output =</div>\r\n      <Input className='font-mono bg-muted' value={result.expected} readOnly />\r\n    </div>\r\n    {result && (\r\n      <>\r\n        <div>\r\n          <div className='text-sm text-muted-foreground mb-2'>Actual Output =</div>\r\n          <Input className='font-mono bg-muted' value={result.output} readOnly />\r\n        </div>\r\n        <div className={`flex items-center gap-2 ${result.isPass ? 'text-green-600' : 'text-red-600'}`}>\r\n          {result.isPass ? <CheckCircle2 className='w-5 h-5' /> : <XCircle className='w-5 h-5' />}\r\n          <span>{result.isPass ? 'Passed' : 'Failed'}</span>\r\n        </div>\r\n      </>\r\n    )}\r\n  </div>\r\n)\r\n\r\nconst SolutionSelector = ({ solutions, selectedIndex, onSelect, failedSolutions = [] }) => (\r\n  <div className='flex items-center gap-2 flex-wrap mb-4'>\r\n    {solutions.map((_, index) => (\r\n      <Button\r\n        key={index}\r\n        type='button'\r\n        variant={selectedIndex === index ? 'default' : 'outline'}\r\n        className={`${\r\n          failedSolutions.includes(index)\r\n            ? 'bg-red-100 hover:bg-red-200 text-red-700'\r\n            : 'bg-blue-100 hover:bg-blue-200 text-blue-700'\r\n        } ${selectedIndex === index ? 'border-2 border-blue-500' : ''}`}\r\n        onClick={() => onSelect(index)}\r\n      >\r\n        Solution {index + 1}\r\n      </Button>\r\n    ))}\r\n  </div>\r\n)\r\n\r\nconst SolutionResult = ({ result }) => (\r\n  <div className='space-y-4 mt-4'>\r\n    <div>\r\n      <div className='text-sm font-medium'>Status: </div>\r\n      <span className={result.status.id === 3 ? 'text-green-600' : 'text-red-600'}>{result.status.description}</span>\r\n    </div>\r\n    {result.compileErrors && (\r\n      <div>\r\n        <div className='text-sm font-medium text-red-600'>Compile Errors: </div>\r\n        <pre className='bg-red-100 p-2 rounded text-sm overflow-x-auto'>{result.compileErrors}</pre>\r\n      </div>\r\n    )}\r\n    {result.runTimeErrors && (\r\n      <div>\r\n        <div className='text-sm font-medium text-red-600'>Runtime Errors: </div>\r\n        <pre className='bg-red-100 p-2 rounded text-sm overflow-x-auto'>{result.runTimeErrors}</pre>\r\n      </div>\r\n    )}\r\n  </div>\r\n)\r\n\r\nconst CodeEditor = ({ form, setIsRunSuccess, testCaseUpdate, solutionUpdate }) => {\r\n  const [files, setFiles] = React.useState([{id: null, name: 'Solution.java', content: '' }])\r\n  const [activeFile, setActiveFile] = React.useState('Solution.java')\r\n  const [testContent, setTestContent] = React.useState('')\r\n  const [testCaseTab, setTestCaseTab] = React.useState('testcase')\r\n  const [selectedCaseIndex, setSelectedCaseIndex] = React.useState(0)\r\n  const [isSuccess, setIsSuccess] = React.useState(null)\r\n  const [testCases, setTestCases] = React.useState([])\r\n  const [selectedSolutionIndex, setSelectedSolutionIndex] = React.useState(0)\r\n  const [testResults, setTestResults] = React.useState(null)\r\n  const [isRunning, setIsRunning] = React.useState(false)\r\n\r\n\r\n\r\n  \r\n\r\n  const { toast } = useToast()\r\n  const { setValue } = form\r\n\r\n  React.useEffect(() => {\r\n    if (testCaseUpdate) {\r\n      // Chuyển đổi ngược dữ liệu test case\r\n      const originalTestCases = reverseTransformTestScript(testCaseUpdate);\r\n      // Gán dữ liệu đã chuyển đổi ngược vào state\r\n      setTestCases(originalTestCases);\r\n    }\r\n  }, [testCaseUpdate]);\r\n\r\n\r\n\r\n\r\n  React.useEffect(() => {\r\n    if (solutionUpdate.solutions && solutionUpdate.solutions.length > 0) {\r\n      // Chuyển đổi dữ liệu solution từ API về định dạng cần thiết\r\n      const updatedFiles = solutionUpdate.solutions.map((solution, index) => ({       \r\n        id: solution.id,\r\n        name:  index === 0 ? 'Solution.java' : `Solution${index}.java`, // Đặt tên file theo định dạng Solution{index}.java\r\n        content: solution.solutionCode\r\n      }));\r\n      setFiles(updatedFiles);\r\n      setActiveFile(updatedFiles[0].name); // Đặt file đầu tiên làm file hoạt động\r\n    }\r\n\r\n    if (solutionUpdate.testCode) {\r\n      setTestContent(solutionUpdate.testCode);\r\n    }\r\n  }, [solutionUpdate]);\r\n\r\n  const handleAddFile = () => {\r\n    const lastFileNumber = Math.max(\r\n      ...files.map((file) => {\r\n        const match = file.name.match(/Solution(\\d+)\\.java/)\r\n        return match ? parseInt(match[1]) : 0\r\n      })\r\n    )\r\n    const newFileName = `Solution${lastFileNumber + 1}.java`\r\n    setFiles((prev) => [...prev, { id: null, name: newFileName, content: '' }])\r\n    setActiveFile(newFileName)\r\n    setIsRunSuccess(false)\r\n  }\r\n\r\n  const isReadyToRun = () => {\r\n    const areFilesNonEmpty = files.every((file) => file.content.trim() !== '')\r\n    const isTestContentNonEmpty = testContent.trim() !== ''\r\n    return areFilesNonEmpty && isTestContentNonEmpty\r\n  }\r\n\r\n  const handleDeleteFile = (fileName) => {\r\n    if (files.length > 1) {\r\n      const indexToDelete = files.findIndex((file) => file.name === fileName)\r\n      const newFiles = files.filter((file) => file.name !== fileName)\r\n\r\n      for (let i = indexToDelete; i < newFiles.length; i++) {\r\n        const match = newFiles[i].name.match(/Solution(\\d+)\\.java/)\r\n        if (match) {\r\n          const newNumber = parseInt(match[1]) - 1\r\n          newFiles[i].name = `Solution${newNumber}.java`\r\n        }\r\n      }\r\n      setFiles(newFiles)\r\n      if (activeFile === fileName) {\r\n        setActiveFile(newFiles[indexToDelete] ? newFiles[indexToDelete].name : newFiles[newFiles.length - 1].name)\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleSolutionChange = (value) => {\r\n    setFiles((prevFiles) => prevFiles.map((file) => (file.name === activeFile ? { ...file, content: value } : file)))\r\n  }\r\n\r\n  const handleTestChange = (value) => {\r\n    setTestContent(value)\r\n  }\r\n\r\n  const handleRun = async () => {\r\n    if (!isReadyToRun()) {\r\n      toast({\r\n        variant: 'destructive',\r\n        title: 'Empty Code or Test Content',\r\n        description: 'Your code or test content is empty, please check again',       \r\n      })\r\n      return\r\n    }\r\n    setIsRunning(true)\r\n    setTestCaseTab('result')    \r\n\r\n    const values = form.getValues()\r\n\r\n    const resource = {\r\n      resourceLimits: {\r\n        cpuTimeLimit: values.cpuTimeLimit,\r\n        cpuExtraTime: values.cpuExtraTime,\r\n        memoryLimit: values.memoryLimit * 1024,\r\n        enableNetwork: values.enableNetwork,\r\n        stackLimit: values.stackLimit * 1024,\r\n        maxThread: values.maxThread,\r\n        maxFileSize: values.maxFileSize * 1024\r\n      }\r\n    }\r\n\r\n\r\n    const testCase = transformTestCasesUpdate(testCases)\r\n\r\n    const createCode = {\r\n      batchCodeExecuteDto: {\r\n        languageCode: 'Java',\r\n        testCases: testCase.testCases,\r\n        solutionCodes: files.map((file) => file.content),\r\n        testCode: testContent\r\n      },\r\n      resourceLimits: resource.resourceLimits\r\n    }\r\n\r\n    const testScript = transformTestScriptUpdate(testCases)\r\n    setValue('testCases', testScript.testCases)\r\n\r\n    const testScriptDto = [\r\n      {\r\n        fileName: 'Main.java',\r\n        template: '',\r\n        testCode: testContent,\r\n        description: '',\r\n        languageCode: 'Java',\r\n        solutions: files.map((file) => ({\r\n          id: file.id,\r\n          fileName: 'Main.java',\r\n          solutionCode: file.content,\r\n          description: '',\r\n          languageCode: 'Java',\r\n          priority: true\r\n        }))\r\n      }\r\n    ]\r\n\r\n    setValue('testcripts', testScriptDto)\r\n\r\n    try {\r\n      const response = await runCode(createCode)\r\n      setTestResults(response.codeExecuteDtos)\r\n      const hasCompileOrRuntimeErrors = response.codeExecuteDtos.some(dto =>\r\n        dto.compileErrors || dto.runTimeErrors\r\n      );\r\n  \r\n      if (hasCompileOrRuntimeErrors) {\r\n        toast({\r\n          variant: 'destructive',\r\n          title: 'Runcode Result',\r\n          description: 'There are compile or runtime errors. Please check your code.'\r\n        });\r\n        setIsRunSuccess(false)\r\n        return;\r\n      }\r\n\r\n      const hasFailedTestCase = response.codeExecuteDtos.some(dto =>\r\n        dto.testResults.some(testResult => !testResult.isPass)\r\n      );\r\n  \r\n      if (hasFailedTestCase) {\r\n        toast({\r\n          variant: 'destructive',\r\n          title: 'Runcode Result',\r\n          description: 'Some test cases failed, please check your code again'\r\n        })\r\n        setIsRunSuccess(false)  \r\n      } else {\r\n        toast({\r\n          variant: 'success',\r\n          title: 'Runcode Result',\r\n          description: 'All test cases passed successfully!'\r\n        })\r\n        setIsRunSuccess(true)       \r\n      }     \r\n    } catch (error) {\r\n      toast({\r\n        variant: 'destructive',\r\n        title: 'Runcode Result',\r\n        description: 'There was a problem with your request.',\r\n        action: <ToastAction altText='Try again'>Try again</ToastAction>           \r\n      })\r\n      setIsRunSuccess(false)  \r\n      console.error('Error creating course:', error)\r\n    } finally {      \r\n      setIsRunning(false)\r\n    }\r\n  }\r\n\r\n  const getDisplayFields = (testCase) => {\r\n    return Object.keys(testCase).filter((key) => key !== 'expectedOutput' && key !== 'isHidden' && key !== 'id')\r\n  }\r\n\r\n  const currentSolutionResult = testResults && testResults[selectedSolutionIndex]\r\n  const currentTestCase = currentSolutionResult && currentSolutionResult.testResults[selectedCaseIndex]\r\n\r\n  const failedSolutions = testResults\r\n    ? testResults.map((result, index) => (result.status.id !== 3 ? index : -1)).filter((index) => index !== -1)\r\n    : []\r\n\r\n  const failedTestCases =\r\n    currentSolutionResult && currentSolutionResult.testResults\r\n      ? currentSolutionResult.testResults\r\n          .map((result, index) => (!result.isPass ? index : -1))\r\n          .filter((index) => index !== -1)\r\n      : []\r\n\r\n  return (\r\n    <div className='flex flex-col'>\r\n      <TestCaseGen testCases={testCases} setTestCases={setTestCases} />\r\n\r\n      <div className='flex justify-center'>\r\n        <CardHeader>\r\n          <CardTitle className='text-center text-2xl font-semibold'>Create Code Problem</CardTitle>\r\n        </CardHeader>\r\n      </div>\r\n\r\n      <div className='h-[800px] rounded-xl border z-0'>\r\n        <ResizablePanelGroup direction='vertical'>\r\n          <ResizablePanel defaultSize={70}>\r\n            <ResizablePanelGroup direction='horizontal'>\r\n              <ResizablePanel defaultSize={50}>\r\n                <div className='flex h-full flex-col'>\r\n                  <div className='flex items-center justify-between px-4 py-2 border-b bg-background shrink-0'>\r\n                    <div className='flex items-center gap-2'>\r\n                      <Code className='w-5 h-5' />\r\n                      <h2 className='text-sm font-medium'>Solution</h2>\r\n                    </div>\r\n                    <div className='flex items-center gap-2'>\r\n                      <DropdownMenu>\r\n                        <DropdownMenuTrigger asChild>\r\n                          <Button variant='outline' className='w-[200px] justify-between'>\r\n                            {activeFile}\r\n                            <ChevronDown className='ml-2 h-4 w-4 opacity-50' />\r\n                          </Button>\r\n                        </DropdownMenuTrigger>\r\n                        <DropdownMenuContent className='w-[200px]'>\r\n                          {files.map((file) => (\r\n                            <DropdownMenuItem\r\n                              key={file.name}\r\n                              onSelect={() => setActiveFile(file.name)}\r\n                              className='justify-between'\r\n                            >\r\n                              {file.name}\r\n                              {files.length > 1 && (\r\n                                <Button\r\n                                  type='button'\r\n                                  variant='ghost'\r\n                                  size='icon'\r\n                                  className='h-4 w-4 p-0'\r\n                                  onClick={(e) => {\r\n                                    e.stopPropagation()\r\n                                    handleDeleteFile(file.name)\r\n                                  }}\r\n                                >\r\n                                  <X className='h-3 w-3' />\r\n                                </Button>\r\n                              )}\r\n                            </DropdownMenuItem>\r\n                          ))}\r\n                        </DropdownMenuContent>\r\n                      </DropdownMenu>\r\n                      <Button type='button' variant='ghost' size='icon' onClick={handleAddFile}>\r\n                        <Plus className='w-4 h-4' />\r\n                      </Button>\r\n                    </div>\r\n                  </div>\r\n                  <div className='flex-1 w-full min-h-0'>\r\n                    <Editor\r\n                      height='100%'\r\n                      defaultLanguage='java'\r\n                      theme='vs-dark'\r\n                      value={files.find((file) => file.name === activeFile)?.content || ''}\r\n                      onChange={handleSolutionChange}\r\n                      options={{\r\n                        minimap: { enabled: false },\r\n                        scrollBeyondLastLine: false,\r\n                        fontSize: 14,\r\n                        automaticLayout: true,\r\n                        lineNumbers: 'on',\r\n                        lineNumbersMinChars: 3,\r\n                        padding: { top: 10, bottom: 10 }\r\n                      }}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </ResizablePanel>\r\n              <ResizableHandle />\r\n              <ResizablePanel defaultSize={50}>\r\n                <div className='flex h-full flex-col'>\r\n                  <div className='flex items-center justify-between px-4 py-3 border-b bg-background shrink-0'>\r\n                    <div className='flex items-center gap-2'>\r\n                      <TestTube2 className='w-5 h-5' />\r\n                      <h2 className='text-sm font-medium'>Test</h2>\r\n                    </div>\r\n                    <div className='flex items-center gap-2'>\r\n                      <Tabs value='test.java' className='flex-1'>\r\n                        <TabsList className='p-0 bg-transparent h-7'>\r\n                          <TabsTrigger\r\n                            value='test.java'\r\n                            className='relative px-3 text-xs bg-background text-foreground h-7'\r\n                          >\r\n                            Main.java\r\n                          </TabsTrigger>\r\n                        </TabsList>\r\n                      </Tabs>\r\n                    </div>\r\n                  </div>\r\n                  <div className='flex-1 w-full min-h-0'>\r\n                    <Editor\r\n                      height='100%'\r\n                      defaultLanguage='java'\r\n                      theme='vs-dark'\r\n                      value={testContent}\r\n                      onChange={handleTestChange}\r\n                      options={{\r\n                        minimap: { enabled: false },\r\n                        scrollBeyondLastLine: false,\r\n                        fontSize: 14,\r\n                        automaticLayout: true,\r\n                        lineNumbers: 'on',\r\n                        lineNumbersMinChars: 3,\r\n                        padding: { top: 10, bottom: 10 }\r\n                      }}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </ResizablePanel>\r\n            </ResizablePanelGroup>\r\n          </ResizablePanel>\r\n          <ResizableHandle />\r\n          <ResizablePanel defaultSize={30}>\r\n            <Card className='flex h-full flex-col rounded-none'>\r\n              <Tabs value={testCaseTab} onValueChange={setTestCaseTab} className='flex h-full flex-col'>\r\n                <div className='flex items-center justify-between border-b px-4 py-2 bg-gray-400'>\r\n                  <TabsList>\r\n                    <TabsTrigger value='testcase'>Testcase</TabsTrigger>\r\n                    <TabsTrigger value='result'>Test Result</TabsTrigger>\r\n                  </TabsList>\r\n                  {isSuccess === false && (\r\n                    <div className='flex items-center gap-2'>\r\n                      <CircleX className='text-red-700 w-8 h-8' />\r\n                      <p className='text-red-700 font-medium'>Failed, please check Test Result</p>\r\n                    </div>\r\n                  )}\r\n                  {isSuccess === true && (\r\n                    <div className='flex items-center gap-2'>\r\n                      <CircleCheck className='text-green-700 w-8 h-8' />\r\n                      <p className='text-green-700 font-medium'>Success, you can move to the next step.</p>\r\n                    </div>\r\n                  )}\r\n                  <Button type='button' onClick={handleRun} disabled={isRunning}>\r\n                    {isRunning ? (\r\n                      <>\r\n                        <Loader2 className='mr-2 h-4 w-4 animate-spin' />\r\n                        Running...\r\n                      </>\r\n                    ) : (\r\n                      <>\r\n                        <Play className='mr-2 h-4 w-4' />\r\n                        Run\r\n                      </>\r\n                    )}\r\n                  </Button>\r\n                </div>\r\n                <ScrollArea className='flex-1'>\r\n                  <TabsContent value='testcase' className='p-4'>\r\n                    <div className='space-y-6'>\r\n                      <div className='flex items-center gap-2 flex-wrap'>\r\n                        {testCases.map((_, index) => (\r\n                          <Button\r\n                            key={index}\r\n                            type='button'\r\n                            variant={selectedCaseIndex === index ? 'default' : 'outline'}\r\n                            className='bg-emerald-100 hover:bg-emerald-200 text-emerald-700'\r\n                            onClick={() => setSelectedCaseIndex(index)}\r\n                          >\r\n                            Case {index + 1}\r\n                          </Button>\r\n                        ))}\r\n                      </div>\r\n                      {testCases[selectedCaseIndex] && (\r\n                        <div className='space-y-4'>\r\n                          {getDisplayFields(testCases[selectedCaseIndex]).map((field) => (\r\n                            <div key={field}>\r\n                              <div className='text-sm text-muted-foreground mb-2'>{field} =</div>\r\n                              <Input\r\n                                className='font-mono bg-muted'\r\n                                value={testCases[selectedCaseIndex][field]}\r\n                                readOnly\r\n                              />\r\n                            </div>\r\n                          ))}\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  </TabsContent>\r\n                  <TabsContent value='result' className='p-4'>\r\n                    {!testResults ? (\r\n                      <div className='text-center text-lg font-medium text-gray-500'>Please run Code First</div>\r\n                    ) : isRunning ? (\r\n                      <TestResultLoading />\r\n                    ) : (\r\n                      <div className='space-y-6'>\r\n                        <SolutionSelector\r\n                          solutions={testResults}\r\n                          selectedIndex={selectedSolutionIndex}\r\n                          onSelect={setSelectedSolutionIndex}\r\n                          failedSolutions={failedSolutions}\r\n                        />\r\n                        {currentSolutionResult &&\r\n                          currentSolutionResult.testResults &&\r\n                          currentSolutionResult.testResults.length > 0 && (\r\n                            <>\r\n                              <TestCaseSelector\r\n                                testCases={currentSolutionResult.testResults}\r\n                                selectedIndex={selectedCaseIndex}\r\n                                onSelect={setSelectedCaseIndex}\r\n                                failedTestCases={failedTestCases}\r\n                              />\r\n                              {currentTestCase && <TestCaseDisplay result={currentTestCase} />}\r\n                            </>\r\n                          )}\r\n                        <SolutionResult result={currentSolutionResult} />\r\n                      </div>\r\n                    )}\r\n                  </TabsContent>\r\n                </ScrollArea>\r\n              </Tabs>\r\n            </Card>\r\n          </ResizablePanel>\r\n        </ResizablePanelGroup>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default React.memo(CodeEditor)\r\n","import React from 'react'\r\n\r\nimport { Editor } from '@monaco-editor/react'\r\nimport { Tabs, TabsList, TabsTrigger } from '@radix-ui/react-tabs'\r\nimport { FileCode2, Save, TestTube2 } from 'lucide-react'\r\nimport { useState } from 'react'\r\nimport { useFormContext } from 'react-hook-form'\r\nimport { Button } from '@/components/ui/button'\r\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card'\r\n\r\nconst Template = ({ setIsSaveTemplate, templateUpdate }) => {\r\n  const [testContent, setTestContent] = useState('')\r\n  const { setValue, getValues } = useFormContext();\r\n\r\n\r\n  React.useEffect(() => {\r\n    if (templateUpdate) {\r\n      setTestContent(templateUpdate);\r\n    }\r\n  }, [templateUpdate])\r\n\r\n  const handleTestChange = (value) => {\r\n    setTestContent(value || '')\r\n  }\r\n\r\n  const handleSaveAndFinish = () => {\r\n    const currentBatchCodeExecuteDto = getValues('testcripts');\r\n    currentBatchCodeExecuteDto[0].template = testContent\r\n    setValue('testcripts', currentBatchCodeExecuteDto)\r\n    setIsSaveTemplate(true);\r\n  };\r\n\r\n  return (\r\n    <Card className=\"w-full max-w-4xl mx-auto\">\r\n      <CardHeader>\r\n        <CardTitle>Final Step: Set Up Problem Template</CardTitle>\r\n        <CardDescription>\r\n          This is the last step in creating your programming problem. Here, you can set up the initial code template that learners will see when they start the problem. \r\n          Include any necessary class structures, method signatures, or comments to guide the learners.\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <div className='flex flex-col h-[400px] border rounded-md overflow-hidden'>\r\n          <div className='flex items-center justify-between px-4 py-2 border-b bg-background shrink-0'>\r\n            <div className='flex items-center gap-2'>\r\n              <FileCode2 className='w-5 h-5' />\r\n              <h2 className='text-sm font-medium'>Problem Template</h2>\r\n            </div>\r\n            <div className='flex items-center gap-2'>\r\n              <Tabs defaultValue='solution.java' className='flex-1'>\r\n                <TabsList className='h-8 p-0 bg-transparent'>\r\n                  <TabsTrigger value='solution.java' className='px-3 text-xs h-8 data-[state=active]:bg-muted'>\r\n                    Solution.java\r\n                  </TabsTrigger>\r\n                </TabsList>\r\n              </Tabs>\r\n            </div>\r\n          </div>\r\n          <div className='flex-1 min-h-0'>\r\n            <Editor\r\n              height=\"100%\"\r\n              defaultLanguage='java'\r\n              theme='vs-dark'\r\n              value={testContent}\r\n              onChange={handleTestChange}\r\n              options={{\r\n                minimap: { enabled: false },\r\n                scrollBeyondLastLine: false,\r\n                fontSize: 14,\r\n                automaticLayout: true,\r\n                lineNumbers: 'on',\r\n                lineNumbersMinChars: 3,\r\n                padding: { top: 10, bottom: 10 }\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n      </CardContent>\r\n      <CardFooter className=\"flex justify-between\">      \r\n        <Button type='button' onClick={handleSaveAndFinish}>\r\n          <Save className=\"w-4 h-4 mr-2\" />\r\n          Save\r\n        </Button>\r\n      </CardFooter>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default React.memo(Template);\r\n","import React from 'react'\r\nimport BasicInfoStep from '@/pages/Problem/ProblemLecture/Update/basic-info-step'\r\nimport CodeEditor from '@/pages/Problem/ProblemLecture/Update/CodeEditor'\r\nimport Template from '@/pages/Problem/ProblemLecture/Update/Template';\r\n\r\nconst FormTabs = ({ activeTab, form, setIsSaveTemplate, setIsRunSuccess, testCaseUpdate, solutionUpdate }) => {\r\n\r\n  return (\r\n    <div className='mx-auto px-4 py-24'>\r\n      <div className='space-y-6'>\r\n        <div style={{ display: activeTab === 'basic' ? 'block' : 'none' }}>\r\n          <BasicInfoStep form={form} />\r\n        </div>\r\n        <div style={{ display: activeTab === 'code' ? 'block' : 'none' }}>\r\n          <CodeEditor form={form} setIsRunSuccess={setIsRunSuccess} testCaseUpdate={testCaseUpdate} solutionUpdate={solutionUpdate} />\r\n        </div>\r\n        <div style={{ display: activeTab === 'description' ? 'block' : 'none' }}>\r\n          <Template form={form} setIsSaveTemplate={setIsSaveTemplate} templateUpdate={solutionUpdate.template} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default React.memo(FormTabs);\r\n","import React from 'react'\r\nimport { useEffect, useState } from 'react'\r\nimport Header from './Header'\r\nimport BottomTabs from './BottomTabs'\r\nimport { FormProvider, useForm } from 'react-hook-form'\r\nimport { useToast } from '@/hooks/use-toast'\r\nimport FormTabs from './FormTabs'\r\nimport { getProblemDetail, updateProblemAg } from '@/services/api/problemApi'\r\nimport { ToastAction } from '@/components/ui/toast'\r\nimport { useMatch, useNavigate } from '@tanstack/react-router'\r\nimport { updateLectureProblemRoute } from '@/routers/router'\r\nimport { Loading } from '@/components/ui/overlay'\r\nconst UpdateProblemAg = ({}) => {\r\n  const [activeTab, setActiveTab] = useState('basic')\r\n  const [isSaveTemplate, setIsSaveTemplate] = useState(false)\r\n  const { toast } = useToast()\r\n  const [isRunSuccess, setIsRunSuccess] = useState(false)\r\n  const [problemDetail, setProblemDetail] = useState(null)\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [isLoadingSubmit, setIsLoadingSubmit] = useState(false);\r\n  const navigate = useNavigate()\r\n\r\n  const { params } = useMatch(updateLectureProblemRoute.id);\r\n  const { problemId } = params\r\n  const { lectureId } = params\r\n  const { courseId } = params\r\n  console.log('problemId', problemId)\r\n\r\n  const form = useForm({\r\n    defaultValues: {\r\n      title: '',\r\n      description: '',\r\n      problemType: 'Challenge',\r\n      difficultyType: 'Medium',\r\n      cpuTimeLimit: 2,\r\n      cpuExtraTime: 2.5,\r\n      memoryLimit: 250,\r\n      stackLimit: 64,\r\n      maxThread: 70,\r\n      maxFileSize: 10,\r\n      enableNetwork: false,\r\n      isActive: true,\r\n      testCases: {},\r\n      createTestScriptDto: []\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    const fetchProblemDetail = async () => {\r\n      try {\r\n        const response = await getProblemDetail(problemId);\r\n        setProblemDetail(response.problemDetailsDto);\r\n        setIsLoading(false);\r\n      } catch (error) {\r\n        console.error('Error get problem detail:', error);\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    fetchProblemDetail();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (problemDetail) {\r\n      form.reset({\r\n        title: problemDetail.title || '',\r\n        description: problemDetail.description || '',\r\n        problemType: problemDetail.problemType || 'Challenge',\r\n        difficultyType: problemDetail.difficultyType || 'Medium',\r\n        cpuTimeLimit: problemDetail.cpuTimeLimit || 2,\r\n        cpuExtraTime: problemDetail.cpuExtraTime || 2.5,\r\n        memoryLimit: (problemDetail.memoryLimit || 250) / 1024,\r\n        stackLimit: (problemDetail.stackLimit || 64) / 1024,\r\n        maxThread: problemDetail.maxThread || 70,\r\n        maxFileSize: (problemDetail.maxFileSize || 10) / 1024,\r\n        enableNetwork: problemDetail.enableNetwork || false,\r\n        isActive: problemDetail.isActive || true,\r\n        testCases: problemDetail.testCases || {},\r\n        testcripts: problemDetail.testScrips || []\r\n      });\r\n    }\r\n  }, [problemDetail, form]);\r\n\r\n  if (isLoading) {\r\n    return <Loading />;\r\n  }\r\n\r\n\r\n  const onSubmit = async (data) => {\r\n    const updatedData = { ...data }\r\n\r\n    // Quy đổi memoryLimit từ MB sang KB\r\n    updatedData.memoryLimit = updatedData.memoryLimit * 1024\r\n    updatedData.maxFileSize = updatedData.maxFileSize * 1024\r\n    updatedData.stackLimit = updatedData.stackLimit * 1024\r\n\r\n    const problemData = {\r\n      problem: updatedData\r\n    }\r\n\r\n\r\n    setIsLoadingSubmit(true)\r\n    try {\r\n      const response = await updateProblemAg(problemData, problemId)\r\n      toast({\r\n        variant: 'success',\r\n        title: 'Update problem successfully',\r\n        description: 'Update problem successfully'\r\n      })\r\n      navigate({ to: `/edit-curriculum-course/${courseId}` })\r\n    } catch (error) {\r\n      toast({\r\n        variant: 'destructive',\r\n        title: 'Oops! Something went wrong',\r\n        description: 'Please try again!',\r\n        action: <ToastAction altText='Try again' onClick={() => onSubmit(form.getValues())}>Try again</ToastAction>\r\n      })\r\n      console.error('Error creating problem:', error)\r\n    } finally {\r\n      setIsLoadingSubmit(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className='min-h-screen bg-gray-50'>\r\n      <Header backTo='Back to Curriculum' courseId={courseId} />\r\n      <FormProvider {...form}>\r\n        <form onSubmit={form.handleSubmit(onSubmit)}>\r\n          <FormTabs\r\n            activeTab={activeTab}\r\n            form={form}\r\n            setIsSaveTemplate={setIsSaveTemplate}\r\n            setIsRunSuccess={setIsRunSuccess}\r\n            testCaseUpdate={problemDetail?.testCases}\r\n            solutionUpdate={problemDetail?.testScrips[0]}\r\n          />\r\n          <BottomTabs\r\n            activeTab={activeTab}\r\n            setActiveTab={setActiveTab}\r\n            isSaveTemplate={isSaveTemplate}\r\n            isRunSuccess={isRunSuccess}\r\n            isLoadingSubmit={isLoadingSubmit}\r\n          />\r\n        </form>\r\n      </FormProvider>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default React.memo(UpdateProblemAg)\r\n"],"names":["Header","courseId","navigate","useNavigate","jsx","ArrowLeft","tabs","FileText","Code","BookOpen","BottomTabs","activeTab","setActiveTab","isSaveTemplate","isRunSuccess","isLoadingSubmit","currentTabIndex","tab","isLastTab","isFirstTab","isDialogOpen","setIsDialogOpen","useState","openDialog","closeDialog","handleConfirm","handlePrevious","handleNext","jsxs","Button","Icon","Fragment","Loader2","ArrowRight","ControlledAlertDialog","BasicInfoStep","form","FormField","field","FormItem","FormLabel","FormControl","Input","FormMessage","MarkdownFormField","Select","SelectTrigger","SelectValue","SelectContent","SelectItem","Switch","TestCaseGen","testCases","setTestCases","params","setParams","newParam","setNewParam","previewInput","setPreviewInput","previewOutput","setPreviewOutput","useEffect","extractedParams","key","addParam","removeParam","param","p","testCase","removed","rest","createTestCase","newTestCase","acc","updateTestCaseValue","testCaseIndex","value","updatedTestCases","updateExpectedOutput","removeTestCase","index","_","toggleTestCaseHidden","input","output","createTestCaseNoParam","Card","CardHeader","CardTitle","CardFooter","id","displayTestCase","Label","X","CardContent","Badge","e","Plus","Textarea","TestCaseGen$1","React","TestCaseSelector","selectedIndex","onSelect","failedTestCases","TestCaseDisplay","result","CheckCircle2","XCircle","SolutionSelector","solutions","failedSolutions","SolutionResult","CodeEditor","setIsRunSuccess","testCaseUpdate","solutionUpdate","files","setFiles","React.useState","activeFile","setActiveFile","testContent","setTestContent","testCaseTab","setTestCaseTab","selectedCaseIndex","setSelectedCaseIndex","isSuccess","setIsSuccess","selectedSolutionIndex","setSelectedSolutionIndex","testResults","setTestResults","isRunning","setIsRunning","toast","useToast","setValue","React.useEffect","originalTestCases","reverseTransformTestScript","updatedFiles","solution","handleAddFile","newFileName","file","match","prev","isReadyToRun","areFilesNonEmpty","isTestContentNonEmpty","handleDeleteFile","fileName","indexToDelete","newFiles","i","newNumber","handleSolutionChange","prevFiles","handleTestChange","handleRun","values","resource","createCode","transformTestCasesUpdate","testScript","transformTestScriptUpdate","testScriptDto","response","runCode","dto","testResult","error","ToastAction","getDisplayFields","currentSolutionResult","currentTestCase","ResizablePanelGroup","ResizablePanel","DropdownMenu","DropdownMenuTrigger","ChevronDown","DropdownMenuContent","DropdownMenuItem","Editor","_a","ResizableHandle","TestTube2","Tabs","TabsList","TabsTrigger","CircleX","CircleCheck","Play","ScrollArea","TabsContent","TestResultLoading","React.memo","Template","setIsSaveTemplate","templateUpdate","getValues","useFormContext","handleSaveAndFinish","currentBatchCodeExecuteDto","CardDescription","FileCode2","Save","Template$1","FormTabs","FormTabs$1","UpdateProblemAg","problemDetail","setProblemDetail","isLoading","setIsLoading","setIsLoadingSubmit","useMatch","updateLectureProblemRoute","problemId","useForm","getProblemDetail","Loading","onSubmit","data","updatedData","problemData","updateProblemAg","FormProvider","UpdateProblemLec"],"mappings":"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"}