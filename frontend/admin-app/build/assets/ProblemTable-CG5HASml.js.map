{"version":3,"file":"ProblemTable-CG5HASml.js","sources":["../../src/components/ProblemTable/columns.jsx","../../src/components/ProblemTable/problems-table.jsx","../../src/pages/Problem/ProblemTable.jsx"],"sourcesContent":["import { createColumnHelper } from '@tanstack/react-table'\r\nimport { MoreHorizontal, ArrowUpDown } from 'lucide-react'\r\nimport { Button } from '@/components/ui/button'\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuLabel,\r\n  DropdownMenuSeparator,\r\n  DropdownMenuTrigger\r\n} from '@/components/ui/dropdown-menu'\r\nimport { Checkbox } from '@/components/ui/checkbox'\r\nimport { Badge } from '@/components/ui/badge'\r\nimport { useNavigate } from '@tanstack/react-router'\r\nimport { deleteProblemAg } from '@/services/api/problemApi'\r\n\r\nconst columnHelper = createColumnHelper()\r\n\r\nexport const columns = [\r\n  columnHelper.display({\r\n    id: 'select',\r\n    header: ({ table }) => (\r\n      <Checkbox\r\n        checked={table.getIsAllPageRowsSelected()}\r\n        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\r\n        aria-label='Select all'\r\n      />\r\n    ),\r\n    cell: ({ row }) => (\r\n      <Checkbox\r\n        checked={row.getIsSelected()}\r\n        onCheckedChange={(value) => row.toggleSelected(!!value)}\r\n        aria-label='Select row'\r\n      />\r\n    ),\r\n    enableSorting: false,\r\n    enableHiding: false\r\n  }),\r\n  columnHelper.accessor('title', {\r\n    header: ({ column }) => {\r\n      return (\r\n        <Button\r\n          variant='ghost'\r\n          onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}\r\n          className='font-bold'\r\n        >\r\n          Title\r\n          <ArrowUpDown className='ml-2 h-4 w-4' />\r\n        </Button>\r\n      )\r\n    }\r\n  }),\r\n\r\n  columnHelper.accessor('difficulty', {\r\n    header: 'Difficulty',\r\n    cell: ({ row }) => {\r\n      const value = row.getValue('difficulty')\r\n      return (\r\n        <Badge variant={value === 'Easy' ? 'success' : value === 'Medium' ? 'warning' : 'destructive'}>{value}</Badge>\r\n      )\r\n    }\r\n  }),\r\n  columnHelper.accessor('acceptance', {\r\n    header: 'Acceptance',\r\n    cell: ({ row }) => {\r\n      const value = row.getValue('acceptance')\r\n      if (value === -1) {\r\n        return <span className='text-muted-foreground'>No data</span>\r\n      }\r\n      return <Badge variant='secondary'>{value.toFixed(1)}%</Badge>\r\n    }\r\n  }),\r\n  columnHelper.accessor('isActive', {\r\n    header: 'Status',\r\n    cell: ({ row }) => {\r\n      const value = row.getValue('isActive')\r\n      return <Badge variant={value ? 'success' : 'secondary'}>{value ? 'Active' : 'Inactive'}</Badge>\r\n    }\r\n  }),\r\n  columnHelper.display({\r\n    id: 'actions',\r\n    cell: ({ row }) => {\r\n      const problem = row.original\r\n      const navigate = useNavigate()\r\n      return (\r\n        <DropdownMenu>\r\n          <DropdownMenuTrigger asChild>\r\n            <Button variant='ghost' className='h-8 w-8 p-0'>\r\n              <span className='sr-only'>Open menu</span>\r\n              <MoreHorizontal className='h-4 w-4' />\r\n            </Button>\r\n          </DropdownMenuTrigger>\r\n          <DropdownMenuContent align='end'>\r\n            <DropdownMenuLabel>Actions</DropdownMenuLabel>\r\n            <DropdownMenuItem onClick={() => navigator.clipboard.writeText(problem.problemsId)}>\r\n              Copy problem ID\r\n            </DropdownMenuItem>\r\n            <DropdownMenuSeparator />\r\n            <DropdownMenuItem\r\n              onClick={() => navigate({ to: '/update-problem/$problemId', params: { problemId: problem.problemsId } })}\r\n            >\r\n              Edit problem\r\n            </DropdownMenuItem>\r\n            <DropdownMenuItem onClick={() => deleteProblemAg(problem.problemsId)}>Delete problem</DropdownMenuItem>\r\n          </DropdownMenuContent>\r\n        </DropdownMenu>\r\n      )\r\n    }\r\n  })\r\n]\r\n","import React from 'react'\r\nimport { useNavigate, useSearch } from '@tanstack/react-router'\r\nimport {\r\n  flexRender,\r\n  getCoreRowModel,\r\n  getFilteredRowModel,\r\n  getPaginationRowModel,\r\n  getSortedRowModel,\r\n  useReactTable\r\n} from '@tanstack/react-table'\r\n\r\nimport { PlusCircle } from 'lucide-react'\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table'\r\nimport { Button } from '@/components/ui/button'\r\nimport { Input } from '@/components/ui/input'\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuCheckboxItem,\r\n  DropdownMenuContent,\r\n  DropdownMenuTrigger\r\n} from '@/components/ui/dropdown-menu'\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'\r\nimport { Skeleton } from '@/components/ui/skeleton'\r\n\r\nimport { columns } from './columns'\r\nimport { getProblemAg, getProblems } from '@/services/api/problemApi'\r\n\r\nexport default function ProblemsTable() {\r\n  const search = useSearch({ from: '/problem-table' })\r\n  const navigate = useNavigate()\r\n  const pageFromUrl = React.useMemo(() => {\r\n    try {\r\n      return search.page ? parseInt(search.page) : 1\r\n    } catch (error) {\r\n      console.error('Error parsing page from URL:', error)\r\n      return 1\r\n    }\r\n  }, [search.page])\r\n  const [data, setData] = React.useState([])\r\n  const [loading, setLoading] = React.useState(true)\r\n  const [error, setError] = React.useState(null)\r\n  const [totalCount, setTotalCount] = React.useState(0)\r\n\r\n  const [sorting, setSorting] = React.useState([])\r\n  const [columnFilters, setColumnFilters] = React.useState([])\r\n  const [columnVisibility, setColumnVisibility] = React.useState({})\r\n  const [rowSelection, setRowSelection] = React.useState({})\r\n  const [pagination, setPagination] = React.useState({\r\n    pageIndex: pageFromUrl - 1,\r\n    pageSize: 3\r\n  })\r\n\r\n  React.useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        setLoading(true)\r\n        const response = await getProblemAg(pagination.pageIndex + 1, pagination.pageSize)\r\n        console.log(response)\r\n        setData(response.problems.data)\r\n        setTotalCount(response.problems.count)\r\n        setLoading(false)\r\n      } catch (error) {\r\n        console.error('Error fetching data: ', error)\r\n        setError('An error occurred while fetching data. Please try again later.')\r\n        setLoading(false)\r\n      }\r\n    }\r\n\r\n    fetchData()\r\n  }, [pagination.pageIndex, pagination.pageSize])\r\n\r\n  React.useEffect(() => {\r\n    navigate(\r\n      {\r\n        search: (old) => ({\r\n          ...old,\r\n          page: pagination.pageIndex + 1\r\n        })\r\n      },\r\n      { replace: true }\r\n    )\r\n  }, [pagination.pageIndex, navigate])\r\n\r\n  const handleAddNewProblem = () => {\r\n    navigate({ to: '/create-problem' })\r\n  }\r\n\r\n  const table = useReactTable({\r\n    data,\r\n    columns,\r\n    pageCount: Math.ceil(totalCount / pagination.pageSize),\r\n    onSortingChange: setSorting,\r\n    onColumnFiltersChange: setColumnFilters,\r\n    getCoreRowModel: getCoreRowModel(),\r\n    getPaginationRowModel: getPaginationRowModel(),\r\n    getSortedRowModel: getSortedRowModel(),\r\n    getFilteredRowModel: getFilteredRowModel(),\r\n    onColumnVisibilityChange: setColumnVisibility,\r\n    onRowSelectionChange: setRowSelection,\r\n    onPaginationChange: setPagination,\r\n    state: {\r\n      sorting,\r\n      columnFilters,\r\n      columnVisibility,\r\n      rowSelection,\r\n      pagination\r\n    },\r\n    manualPagination: true\r\n  })\r\n\r\n  const isFiltered = table.getState().columnFilters.length > 0\r\n\r\n  const clearFilters = React.useCallback(() => {\r\n    table.resetColumnFilters()\r\n  }, [table])\r\n\r\n  const renderTableContent = () => {\r\n    if (loading) {\r\n      return (\r\n        <TableBody>\r\n          {[...Array(pagination.pageSize)].map((_, index) => (\r\n            <TableRow key={index}>\r\n              {columns.map((column, cellIndex) => (\r\n                <TableCell key={cellIndex}>\r\n                  <Skeleton className='h-6 w-full' />\r\n                </TableCell>\r\n              ))}\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      )\r\n    }\r\n\r\n    if (error) {\r\n      return (\r\n        <TableBody>\r\n          <TableRow>\r\n            <TableCell colSpan={columns.length} className='h-24 text-center'>\r\n              Error: {error}\r\n            </TableCell>\r\n          </TableRow>\r\n        </TableBody>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <TableBody>\r\n        {table.getRowModel().rows?.length ? (\r\n          table.getRowModel().rows.map((row) => (\r\n            <TableRow key={row.id} data-state={row.getIsSelected() && 'selected'}>\r\n              {row.getVisibleCells().map((cell) => (\r\n                <TableCell key={cell.id}>{flexRender(cell.column.columnDef.cell, cell.getContext())}</TableCell>\r\n              ))}\r\n            </TableRow>\r\n          ))\r\n        ) : (\r\n          <TableRow>\r\n            <TableCell colSpan={columns.length} className='h-24 text-center'>\r\n              No results.\r\n            </TableCell>\r\n          </TableRow>\r\n        )}\r\n      </TableBody>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className='w-full'>\r\n      <div className='flex justify-between items-center mb-4'>\r\n        <h2 className='text-2xl font-bold'>Problems</h2>\r\n        <Button onClick={handleAddNewProblem} className='flex items-center gap-2'>\r\n          <PlusCircle className='h-5 w-5' />\r\n          Add New Problem\r\n        </Button>\r\n      </div>\r\n      <div className='flex flex-col sm:flex-row items-center py-4 gap-2'>\r\n        <Input\r\n          placeholder='Filter titles...'\r\n          value={table.getColumn('title')?.getFilterValue() ?? ''}\r\n          onChange={(event) => table.getColumn('title')?.setFilterValue(event.target.value)}\r\n          className='max-w-sm'\r\n        />\r\n\r\n        <Select\r\n          value={table.getColumn('difficulty')?.getFilterValue() ?? ''}\r\n          onValueChange={(value) => table.getColumn('difficulty')?.setFilterValue(value)}\r\n        >\r\n          <SelectTrigger className='w-[180px]'>\r\n            <SelectValue placeholder='Select difficulty' />\r\n          </SelectTrigger>\r\n          <SelectContent>\r\n            <SelectItem value='Easy'>Easy</SelectItem>\r\n            <SelectItem value='Medium'>Medium</SelectItem>\r\n            <SelectItem value='Hard'>Hard</SelectItem>\r\n          </SelectContent>\r\n        </Select>\r\n        {isFiltered && (\r\n          <Button onClick={clearFilters} variant='outline' size='sm'>\r\n            Clear Filters\r\n          </Button>\r\n        )}\r\n        <DropdownMenu>\r\n          <DropdownMenuTrigger asChild>\r\n            <Button variant='outline' className='ml-auto'>\r\n              Columns\r\n            </Button>\r\n          </DropdownMenuTrigger>\r\n          <DropdownMenuContent align='end'>\r\n            {table\r\n              .getAllColumns()\r\n              .filter((column) => column.getCanHide())\r\n              .map((column) => {\r\n                return (\r\n                  <DropdownMenuCheckboxItem\r\n                    key={column.id}\r\n                    className='capitalize'\r\n                    checked={column.getIsVisible()}\r\n                    onCheckedChange={(value) => column.toggleVisibility(!!value)}\r\n                  >\r\n                    {column.id}\r\n                  </DropdownMenuCheckboxItem>\r\n                )\r\n              })}\r\n          </DropdownMenuContent>\r\n        </DropdownMenu>\r\n      </div>\r\n      <div className='rounded-md border'>\r\n        <Table>\r\n          <TableHeader>\r\n            {table.getHeaderGroups().map((headerGroup) => (\r\n              <TableRow key={headerGroup.id}>\r\n                {headerGroup.headers.map((header) => (\r\n                  <TableHead key={header.id} className='font-bold'>\r\n                    {header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())}\r\n                  </TableHead>\r\n                ))}\r\n              </TableRow>\r\n            ))}\r\n          </TableHeader>\r\n          {renderTableContent()}\r\n        </Table>\r\n      </div>\r\n      <div className='flex items-center justify-between space-x-2 py-4'>\r\n        <div className='flex-1 text-sm text-muted-foreground'>\r\n          {loading ? (\r\n            <Skeleton className='h-4 w-[250px]' />\r\n          ) : (\r\n            `${table.getFilteredSelectedRowModel().rows.length} of ${totalCount} row(s) selected.`\r\n          )}\r\n        </div>\r\n        <div className='flex items-center space-x-2'>\r\n          <Button\r\n            variant='outline'\r\n            size='sm'\r\n            onClick={() => table.previousPage()}\r\n            disabled={!table.getCanPreviousPage() || loading}\r\n          >\r\n            Previous\r\n          </Button>\r\n          <div className='flex items-center'>\r\n            <span className='flex h-8 w-8 items-center justify-center rounded-md bg-primary text-sm font-medium text-primary-foreground'>\r\n              {loading ? <Skeleton className='h-4 w-4' /> : table.getState().pagination.pageIndex + 1}\r\n            </span>\r\n          </div>\r\n          <Button\r\n            variant='outline'\r\n            size='sm'\r\n            onClick={() => table.nextPage()}\r\n            disabled={!table.getCanNextPage() || loading}\r\n          >\r\n            Next\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import ProblemsTable from '@/components/ProblemTable/problems-table'\r\n\r\nexport default function ProblemTable() {\r\n    return (\r\n      <div className=\"container mx-auto py-10 px-4\">\r\n        <ProblemsTable />\r\n      </div>\r\n    )\r\n  }"],"names":["columnHelper","createColumnHelper","columns","table","jsx","Checkbox","value","row","column","jsxs","Button","ArrowUpDown","Badge","problem","navigate","useNavigate","DropdownMenu","DropdownMenuTrigger","MoreHorizontal","DropdownMenuContent","DropdownMenuLabel","DropdownMenuItem","DropdownMenuSeparator","deleteProblemAg","ProblemsTable","search","useSearch","pageFromUrl","React","error","data","setData","loading","setLoading","setError","totalCount","setTotalCount","sorting","setSorting","columnFilters","setColumnFilters","columnVisibility","setColumnVisibility","rowSelection","setRowSelection","pagination","setPagination","response","getProblemAg","old","handleAddNewProblem","useReactTable","getCoreRowModel","getPaginationRowModel","getSortedRowModel","getFilteredRowModel","isFiltered","clearFilters","renderTableContent","TableBody","_","index","TableRow","cellIndex","TableCell","Skeleton","_a","cell","flexRender","PlusCircle","Input","event","Select","_b","SelectTrigger","SelectValue","SelectContent","SelectItem","DropdownMenuCheckboxItem","Table","TableHeader","headerGroup","header","TableHead","ProblemTable"],"mappings":"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"}