{"version":3,"file":"EditBasicInfoCourse-CGcp8RXN.js","sources":["../../src/pages/Course/EditBasic/Step1EditForm.jsx","../../src/pages/Course/EditBasic/Step2EditLandingPage.jsx","../../src/pages/Course/EditBasicInfoCourse.jsx"],"sourcesContent":["import React from 'react'\r\nimport { useForm, FormProvider } from 'react-hook-form'\r\nimport { zodResolver } from '@hookform/resolvers/zod'\r\nimport * as z from 'zod'\r\nimport { Button } from '@/components/ui/button'\r\nimport { Input } from '@/components/ui/input'\r\nimport { Form, FormField, FormItem, FormLabel, FormControl, FormMessage } from '@/components/ui/form'\r\nimport MarkdownFormField from '@/components/markdown-form-field'\r\n\r\nconst formSchema = z.object({\r\n  title: z.string().min(1, 'Title is required').max(100, 'Title must not exceed 100 characters'),\r\n  headline: z.string().min(1, 'Headline is required').max(200, 'Headline must not exceed 200 characters'),\r\n  prerequisites: z.string().min(1, 'Prerequisites are required'),\r\n  description: z.string().min(1, 'Description is required'),\r\n  objectives: z.string().min(1, 'Course objectives are required'),\r\n  targetAudiences: z.string().min(1, 'Target audiences are required'),\r\n  timeEstimation: z\r\n    .number()\r\n    .min(1, 'Estimated time must be greater than 0')\r\n    .max(1000, 'Estimated time must not exceed 1000 hours')\r\n})\r\n\r\nexport default function Step1EditForm({ onSubmit, initialData }) {\r\n  const methods = useForm({\r\n    resolver: zodResolver(formSchema),\r\n    defaultValues: initialData\r\n  })\r\n\r\n  const handleSubmit = methods.handleSubmit(\r\n    (data) => {\r\n      onSubmit(data)\r\n    },\r\n    (errors) => {}\r\n  )\r\n\r\n  return (\r\n    <FormProvider {...methods}>\r\n      <Form {...methods}>\r\n        <form onSubmit={handleSubmit} className='space-y-8'>\r\n          <FormField\r\n            control={methods.control}\r\n            name='title'\r\n            render={({ field }) => (\r\n              <FormItem>\r\n                <FormLabel className='text-base'>Title</FormLabel>\r\n                <FormControl>\r\n                  <Input {...field} placeholder='Enter course title' />\r\n                </FormControl>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n          <FormField\r\n            control={methods.control}\r\n            name='headline'\r\n            render={({ field }) => (\r\n              <FormItem>\r\n                <FormLabel className='text-base'>Headline</FormLabel>\r\n                <FormControl>\r\n                  <Input {...field} placeholder='Enter course headline' />\r\n                </FormControl>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n          <MarkdownFormField\r\n            control={methods.control}\r\n            name='description'\r\n            label='Description'\r\n            placeholder='Enter course description...'\r\n          />\r\n          <MarkdownFormField\r\n            control={methods.control}\r\n            name='prerequisites'\r\n            label='Prerequisites'\r\n            placeholder='Enter course prerequisites...'\r\n          />\r\n          <MarkdownFormField\r\n            control={methods.control}\r\n            name='objectives'\r\n            label='Objectives'\r\n            placeholder='Enter course objectives...'\r\n          />\r\n          <MarkdownFormField\r\n            control={methods.control}\r\n            name='targetAudiences'\r\n            label='Target Audiences'\r\n            placeholder='Describe the target audiences...'\r\n          />\r\n          <FormField\r\n            control={methods.control}\r\n            name='timeEstimation'\r\n            render={({ field }) => (\r\n              <FormItem>\r\n                <FormLabel className='text-base'>Time Estimation (hours)</FormLabel>\r\n                <FormControl>\r\n                  <Input\r\n                    type='number'\r\n                    step='0.5'\r\n                    {...field}\r\n                    onChange={(e) => field.onChange(parseFloat(e.target.value))}\r\n                    placeholder='Enter estimated course duration'\r\n                  />\r\n                </FormControl>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n          <Button type='submit'>Next to Step 2</Button>\r\n        </form>\r\n      </Form>\r\n    </FormProvider>\r\n  )\r\n}\r\n","import React, { useState, useEffect, useRef } from 'react'\r\nimport { useForm, FormProvider } from 'react-hook-form'\r\nimport { zodResolver } from '@hookform/resolvers/zod'\r\nimport * as z from 'zod'\r\nimport { Button } from '@/components/ui/button'\r\nimport { Input } from '@/components/ui/input'\r\nimport { Form, FormField, FormItem, FormLabel, FormControl, FormMessage } from '@/components/ui/form'\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'\r\nimport { Card, CardContent } from '@/components/ui/card'\r\nimport { Separator } from '@/components/ui/separator'\r\nimport { BarChart, DollarSign, Upload, ChevronRight } from 'lucide-react'\r\nimport { useToast } from '@/hooks/use-toast'\r\nimport { updateCourseImage } from '@/services/api/courseApi'\r\n\r\nconst MAX_FILE_SIZE = 5000000 // 5MB\r\nconst ACCEPTED_IMAGE_TYPES = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp']\r\n\r\nconst landingPageSchema = z.object({\r\n  courseLevel: z.string(),\r\n  image: z\r\n    .object({\r\n      fileName: z.string(),\r\n      base64Image: z.string(),\r\n      contentType: z.string().refine((value) => ACCEPTED_IMAGE_TYPES.includes(value), {\r\n        message: 'Only .jpg, .jpeg, .png and .webp formats are supported.'\r\n      })\r\n    })\r\n    .optional(),\r\n  price: z.number().min(0, 'Price must be 0 or greater').max(1000, 'Price must not exceed 1000 USD')\r\n})\r\n\r\nexport default function Step2EditLandingPage({ onSubmit, onChange, initialData }) {\r\n  const [previewImage, setPreviewImage] = useState(initialData.imageUrl || null)\r\n  const [isUpdatingImage, setIsUpdatingImage] = useState(false)\r\n  const { toast } = useToast()\r\n  const fileInputRef = useRef(null)\r\n  const methods = useForm({\r\n    resolver: zodResolver(landingPageSchema),\r\n    defaultValues: {\r\n      ...initialData,\r\n      image: initialData.imageUrl\r\n        ? {\r\n            fileName: 'current-image.jpg',\r\n            base64Image: initialData.imageUrl,\r\n            contentType: 'image/jpeg'\r\n          }\r\n        : null\r\n    }\r\n  })\r\n\r\n  useEffect(() => {\r\n    methods.reset({\r\n      ...initialData,\r\n      image: initialData.imageUrl\r\n        ? {\r\n            fileName: 'current-image.jpg',\r\n            base64Image: initialData.imageUrl,\r\n            contentType: 'image/jpeg'\r\n          }\r\n        : null\r\n    })\r\n    setPreviewImage(initialData.imageUrl || null)\r\n  }, [initialData, methods])\r\n\r\n  const handleSubmit = methods.handleSubmit((data) => {\r\n    onSubmit(data)\r\n    onChange(data)\r\n  })\r\n\r\n  const handleImageUpdate = async (file) => {\r\n    if (file) {\r\n      if (file.size > MAX_FILE_SIZE) {\r\n        methods.setError('image', {\r\n          type: 'manual',\r\n          message: 'Image size should not exceed 5MB'\r\n        })\r\n        return\r\n      }\r\n      if (!ACCEPTED_IMAGE_TYPES.includes(file.type)) {\r\n        methods.setError('image', {\r\n          type: 'manual',\r\n          message: 'Please upload a valid image file (PNG, JPG, or WebP)'\r\n        })\r\n        return\r\n      }\r\n\r\n      setIsUpdatingImage(true)\r\n\r\n      // Store the current image URL as fallback\r\n      const currentImageUrl = previewImage\r\n\r\n      try {\r\n        const reader = new FileReader()\r\n        reader.onloadend = async () => {\r\n          const base64Image = reader.result.split(',')[1] // Remove the data:image/xxx;base64, part\r\n          const imageData = {\r\n            courseId: initialData.id,\r\n            imageDto: {\r\n              fileName: file.name,\r\n              base64Image: base64Image,\r\n              contentType: file.type\r\n            }\r\n          }\r\n\r\n          const response = await updateCourseImage(initialData.id, imageData)\r\n\r\n          if (response && response.presignedUrl) {\r\n            setPreviewImage(response.presignedUrl)\r\n            methods.setValue('image', {\r\n              fileName: file.name,\r\n              base64Image: response.presignedUrl,\r\n              contentType: file.type\r\n            })\r\n            onChange({ imageUrl: response.presignedUrl })\r\n            toast({\r\n              title: 'Image Updated',\r\n              description: 'Course image has been successfully updated.',\r\n              variant: 'default'\r\n            })\r\n          } else {\r\n            console.error('Invalid server response:', response)\r\n            throw new Error('Invalid response from server')\r\n          }\r\n        }\r\n        reader.readAsDataURL(file)\r\n      } catch (error) {\r\n        console.error('Error updating course image:', error)\r\n        // Revert to the previous image URL\r\n        setPreviewImage(currentImageUrl)\r\n        toast({\r\n          title: 'Error',\r\n          description: 'Failed to update course image. Please try again.',\r\n          variant: 'destructive'\r\n        })\r\n      } finally {\r\n        setIsUpdatingImage(false)\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleUpdateImageClick = () => {\r\n    fileInputRef.current.click()\r\n  }\r\n\r\n  return (\r\n    <FormProvider {...methods}>\r\n      <Form {...methods}>\r\n        <form onSubmit={handleSubmit} className='space-y-8'>\r\n          <Card>\r\n            <CardContent className='pt-6'>\r\n              <div className='grid gap-6'>\r\n                <Separator className='my-6' />\r\n                <FormField\r\n                  control={methods.control}\r\n                  name='image'\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel className='text-base font-semibold'>Course Image</FormLabel>\r\n                      <FormControl>\r\n                        <div className='flex flex-col items-center space-y-4'>\r\n                          {previewImage ? (\r\n                            <div className='group relative w-full max-w-2xl aspect-video rounded-lg overflow-hidden bg-gray-100 border-2 border-gray-200'>\r\n                              <img\r\n                                src={previewImage}\r\n                                alt='Course preview'\r\n                                className='w-full h-full object-cover'\r\n                                onError={(e) => {\r\n                                  console.error('Image failed to load:', previewImage)\r\n                                  setPreviewImage(null)\r\n                                  toast({\r\n                                    title: 'Error',\r\n                                    description: 'Failed to load the image. Please try uploading again.',\r\n                                    variant: 'destructive'\r\n                                  })\r\n                                }}\r\n                              />\r\n                              <div className='absolute inset-0 bg-black/60 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity'>\r\n                                <Button\r\n                                  type='button'\r\n                                  variant='secondary'\r\n                                  size='sm'\r\n                                  onClick={handleUpdateImageClick}\r\n                                  disabled={isUpdatingImage}\r\n                                  className='text-white hover:text-blue-400'\r\n                                >\r\n                                  {isUpdatingImage ? 'Updating...' : 'Update Image'}\r\n                                </Button>\r\n                              </div>\r\n                            </div>\r\n                          ) : (\r\n                            <div className='w-full'>\r\n                              <label\r\n                                htmlFor='dropzone-file'\r\n                                className='relative flex flex-col items-center justify-center w-full h-[280px] border-2 border-gray-300 border-dashed rounded-lg cursor-pointer bg-gray-50/50 hover:bg-gray-50 transition-colors duration-200'\r\n                              >\r\n                                <div className='flex flex-col items-center justify-center pt-5 pb-6 px-4'>\r\n                                  <div className='mb-3 p-4 rounded-full bg-gray-100'>\r\n                                    <Upload className='w-8 h-8 text-gray-500' />\r\n                                  </div>\r\n                                  <p className='mb-2 text-sm text-gray-500'>\r\n                                    <span className='font-medium'>Click to upload</span>\r\n                                  </p>\r\n                                  <p className='text-xs text-gray-500 text-center'>\r\n                                    PNG, JPG or WebP\r\n                                    <br />\r\n                                    (Recommended: 1280x720px)\r\n                                  </p>\r\n                                  <p className='mt-2 text-xs text-gray-500'>Max file size: 5MB</p>\r\n                                </div>\r\n                                <Input\r\n                                  id='dropzone-file'\r\n                                  type='file'\r\n                                  accept='image/png,image/jpeg,image/webp'\r\n                                  className='hidden'\r\n                                  onChange={(e) => handleImageUpdate(e.target.files?.[0])}\r\n                                  disabled={isUpdatingImage}\r\n                                />\r\n                              </label>\r\n                            </div>\r\n                          )}\r\n                          <Input\r\n                            ref={fileInputRef}\r\n                            type='file'\r\n                            accept='image/png,image/jpeg,image/webp'\r\n                            className='hidden'\r\n                            onChange={(e) => handleImageUpdate(e.target.files?.[0])}\r\n                            disabled={isUpdatingImage}\r\n                          />\r\n                        </div>\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n                <Separator className='my-6' />\r\n                <div className='grid grid-cols-1 md:grid-cols-2 gap-6'>\r\n                  <FormField\r\n                    control={methods.control}\r\n                    name='price'\r\n                    render={({ field }) => (\r\n                      <FormItem>\r\n                        <FormLabel className='text-base font-semibold'>Price (USD)</FormLabel>\r\n                        <FormControl>\r\n                          <div className='flex items-center'>\r\n                            <DollarSign className='w-5 h-5 text-muted-foreground mr-2' />\r\n                            <Input\r\n                              type='number'\r\n                              step='0.01'\r\n                              min='0'\r\n                              max='1000'\r\n                              {...field}\r\n                              onChange={(e) => {\r\n                                const value = parseFloat(e.target.value)\r\n                                field.onChange(value)\r\n                                onChange({ price: value })\r\n                              }}\r\n                              placeholder='Enter course price'\r\n                              className='w-full'\r\n                            />\r\n                          </div>\r\n                        </FormControl>\r\n                        <FormMessage />\r\n                      </FormItem>\r\n                    )}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n          <div className='flex justify-end'>\r\n            <Button type='submit' className='w-full sm:w-auto'>\r\n              Update Landing Page\r\n              <ChevronRight className='w-4 h-4 ml-2' />\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      </Form>\r\n    </FormProvider>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Button } from '@/components/ui/button'\r\nimport { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui/card'\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\r\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert'\r\nimport { Loading } from '@/components/ui/overlay'\r\nimport Step1EditForm from '@/pages/Course/EditBasic/Step1EditForm'\r\nimport Step2EditLandingPage from '@/pages/Course/EditBasic/Step2EditLandingPage'\r\nimport { PageContainer } from '@/components/page-container'\r\nimport { useNavigate } from '@tanstack/react-router'\r\nimport { updateCourse, getCourseDetails, changeCourseLevel, changeCourseStatus } from '@/services/api/courseApi'\r\nimport { useToast } from '@/hooks/use-toast'\r\nimport { ArrowLeft, BookOpen, Rocket, AlertCircle, CheckCircle, X } from 'lucide-react'\r\nimport { useMatch } from '@tanstack/react-router'\r\nimport { editBasicCourseRoute } from '@/routers/router'\r\nimport { COURSE_TABLE_PATH, EDIT_BASIC_COURSE_PATH } from '@/routers/router'\r\nexport default function EditBasicInfoCourse() {\r\n  const { params } = useMatch(editBasicCourseRoute.id)\r\n  const { courseId } = params\r\n  const breadcrumbs = [\r\n    { label: 'Course Table', href: COURSE_TABLE_PATH },\r\n    { label: 'Edit Course', href: EDIT_BASIC_COURSE_PATH }\r\n  ]\r\n  const [activeTab, setActiveTab] = useState('step1')\r\n  const [error, setError] = useState(null)\r\n  const [isLoading, setIsLoading] = useState(true)\r\n  const [courseData, setCourseData] = useState(null)\r\n  const { toast } = useToast()\r\n  const navigate = useNavigate()\r\n\r\n  useEffect(() => {\r\n    const fetchCourseData = async () => {\r\n      try {\r\n        const data = await getCourseDetails(courseId)\r\n        console.log('data', data)\r\n        const courseDto = data.courseDetailsDto.courseDto\r\n        setCourseData({\r\n          ...courseDto\r\n        })\r\n        setIsLoading(false)\r\n      } catch (error) {\r\n        console.error('Error fetching course details:', error)\r\n        setError('Failed to load course details. Please try again.')\r\n        setIsLoading(false)\r\n      }\r\n    }\r\n\r\n    fetchCourseData()\r\n  }, [courseId])\r\n\r\n  const handleStep1Submit = (data) => {\r\n    setCourseData((prevData) => ({ ...prevData, ...data }))\r\n    setActiveTab('step2') // Switch to Step 2 after submitting Step 1\r\n  }\r\n\r\n  const handleStep2DataChange = (data) => {\r\n    setCourseData((prevData) => ({ ...prevData, ...data }))\r\n  }\r\n\r\n  const handleLandingPageUpdate = async (data) => {\r\n    setIsLoading(true)\r\n    setError(null)\r\n    const courseUpdate = {\r\n      updateCourseDto: {\r\n        title: courseData.title,\r\n        description: courseData.description,\r\n        headline: courseData.headline,\r\n        timeEstimation: courseData.timeEstimation,\r\n        prerequisites: courseData.prerequisites,\r\n        objectives: courseData.objectives,\r\n        targetAudiences: courseData.targetAudiences,\r\n        price: data.price\r\n      }\r\n    }\r\n    try {\r\n      const response = await updateCourse(courseId, courseUpdate)\r\n      console.log('Course updated successfully:', response)\r\n      toast({\r\n        title: 'Course updated successfully',\r\n        description: 'Your course has been updated.',\r\n        duration: 3000\r\n      })\r\n      navigate({ to: COURSE_TABLE_PATH })\r\n    } catch (error) {\r\n      console.error('Error updating course:', error)\r\n      setError('There was a problem updating your course. Please try again.')\r\n      toast({\r\n        title: 'Error updating course',\r\n        description: 'There was a problem updating your course. Please try again.',\r\n        variant: 'destructive',\r\n        duration: 3000\r\n      })\r\n    } finally {\r\n      setIsLoading(false)\r\n    }\r\n  }\r\n\r\n  const handleTabChange = (value) => {\r\n    setActiveTab(value)\r\n  }\r\n\r\n  if (isLoading) {\r\n    return <Loading />\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Alert variant='destructive'>\r\n        <AlertCircle className='h-4 w-4' />\r\n        <AlertTitle>Error</AlertTitle>\r\n        <AlertDescription>{error}</AlertDescription>\r\n      </Alert>\r\n    )\r\n  }\r\n\r\n  if (!courseData) {\r\n    return <div>No course data available.</div>\r\n  }\r\n\r\n  return (\r\n    <PageContainer breadcrumbs={breadcrumbs}>\r\n      <div className='w-full px-4 sm:px-6 lg:px-8 py-8'>\r\n        <Card className='shadow-lg w-full max-w-6xl mx-auto'>\r\n          <CardHeader>\r\n            <div className='flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4'>\r\n              <div>\r\n                <CardTitle className='text-2xl sm:text-3xl font-bold'>Edit Course: {courseData.title}</CardTitle>\r\n                <CardDescription className='mt-1'>Update your course information</CardDescription>\r\n              </div>\r\n            </div>\r\n          </CardHeader>\r\n          <CardContent className='w-full'>\r\n            {error && (\r\n              <Alert variant='destructive' className='mb-6'>\r\n                <AlertCircle className='h-4 w-4' />\r\n                <AlertTitle>Error</AlertTitle>\r\n                <AlertDescription>{error}</AlertDescription>\r\n                <Button variant='ghost' className='h-4 w-4 p-0 absolute top-4 right-4' onClick={() => setError(null)}>\r\n                  <X className='h-4 w-4' />\r\n                </Button>\r\n              </Alert>\r\n            )}\r\n            <Tabs value={activeTab} onValueChange={handleTabChange} className='w-full'>\r\n              <TabsList className='w-full h-auto p-0 bg-transparent border-b border-gray-200'>\r\n                <div className='grid w-full grid-cols-2'>\r\n                  <TabsTrigger\r\n                    value='step1'\r\n                    className={`\r\n                      flex items-center justify-center px-4 sm:px-8 py-3 sm:py-4 \r\n                      border-b-2 transition-all duration-200 text-sm sm:text-base\r\n                      hover:text-primary hover:bg-gray-50\r\n                      data-[state=active]:border-primary data-[state=active]:text-primary\r\n                      data-[state=inactive]:border-transparent data-[state=inactive]:text-gray-500\r\n                    `}\r\n                  >\r\n                    <BookOpen className='w-4 h-4 sm:w-5 sm:h-5 mr-2' />\r\n                    Course Details\r\n                  </TabsTrigger>\r\n                  <TabsTrigger\r\n                    value='step2'\r\n                    className={`\r\n                      flex items-center justify-center px-4 sm:px-8 py-3 sm:py-4 \r\n                      border-b-2 transition-all duration-200 text-sm sm:text-base\r\n                      hover:text-primary hover:bg-gray-50\r\n                      data-[state=active]:border-primary data-[state=active]:text-primary\r\n                      data-[state=inactive]:border-transparent data-[state=inactive]:text-gray-500\r\n                    `}\r\n                  >\r\n                    <Rocket className='w-4 h-4 sm:w-5 sm:h-5 mr-2' />\r\n                    Landing Page\r\n                  </TabsTrigger>\r\n                </div>\r\n              </TabsList>\r\n              <div className='mt-6 w-full'>\r\n                <TabsContent value='step1' className='w-full'>\r\n                  <Step1EditForm onSubmit={handleStep1Submit} initialData={courseData} />\r\n                </TabsContent>\r\n                <TabsContent value='step2' className='w-full'>\r\n                  <Step2EditLandingPage\r\n                    onSubmit={handleLandingPageUpdate}\r\n                    onChange={handleStep2DataChange}\r\n                    initialData={courseData}\r\n                  />\r\n                </TabsContent>\r\n              </div>\r\n            </Tabs>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </PageContainer>\r\n  )\r\n}\r\n"],"names":["formSchema","z.object","z.string","z.number","Step1EditForm","onSubmit","initialData","methods","useForm","zodResolver","handleSubmit","data","errors","jsx","FormProvider","Form","jsxs","FormField","field","FormItem","FormLabel","FormControl","Input","FormMessage","MarkdownFormField","e","Button","MAX_FILE_SIZE","ACCEPTED_IMAGE_TYPES","landingPageSchema","value","Step2EditLandingPage","onChange","previewImage","setPreviewImage","useState","isUpdatingImage","setIsUpdatingImage","toast","useToast","fileInputRef","useRef","useEffect","handleImageUpdate","file","currentImageUrl","reader","base64Image","imageData","response","updateCourseImage","error","handleUpdateImageClick","Card","CardContent","Separator","Upload","_a","DollarSign","ChevronRight","EditBasicInfoCourse","params","useMatch","editBasicCourseRoute","courseId","breadcrumbs","COURSE_TABLE_PATH","EDIT_BASIC_COURSE_PATH","activeTab","setActiveTab","setError","isLoading","setIsLoading","courseData","setCourseData","navigate","useNavigate","getCourseDetails","courseDto","handleStep1Submit","prevData","handleStep2DataChange","handleLandingPageUpdate","courseUpdate","updateCourse","handleTabChange","Loading","Alert","AlertCircle","AlertTitle","AlertDescription","PageContainer","CardHeader","CardTitle","CardDescription","X","Tabs","TabsList","TabsTrigger","BookOpen","Rocket","TabsContent"],"mappings":"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"}