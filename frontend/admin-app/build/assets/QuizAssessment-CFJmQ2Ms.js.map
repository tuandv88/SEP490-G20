{"version":3,"file":"QuizAssessment-CFJmQ2Ms.js","sources":["../../src/pages/QuizAssessment/AddQuestionForm.jsx","../../src/pages/QuizAssessment/QuizCreationForm.jsx","../../src/pages/QuizAssessment/EditQuestionForm.jsx","../../src/pages/QuizAssessment/QuestionItem.jsx","../../src/pages/QuizAssessment/QuizAssessment.jsx"],"sourcesContent":["'use client'\r\n\r\nimport { useState, useEffect } from 'react'\r\nimport { useForm, useFieldArray, Controller } from 'react-hook-form'\r\nimport { zodResolver } from '@hookform/resolvers/zod'\r\nimport * as z from 'zod'\r\nimport { Button } from '@/components/ui/button'\r\nimport { Input } from '@/components/ui/input'\r\nimport { Label } from '@/components/ui/label'\r\nimport { Switch } from '@/components/ui/switch'\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'\r\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog'\r\nimport { ScrollArea } from '@/components/ui/scroll-area'\r\nimport { createQuestion } from '@/services/api/questionApi'\r\nimport { useToast } from '@/hooks/use-toast'\r\nimport { Trash2, Plus } from 'lucide-react'\r\n\r\nconst QUESTION_TYPES = ['MultipleChoice', 'MultipleSelect', 'TrueFalse']\r\nconst QUESTION_LEVELS = ['EASY', 'MEDIUM', 'HARD', 'EXPERT']\r\n\r\nconst questionSchema = z.object({\r\n  content: z.string().min(1, 'Content is required'),\r\n  isActive: z.boolean(),\r\n  questionType: z.enum(['MultipleChoice', 'MultipleSelect', 'TrueFalse', 'CodeSnippet']),\r\n  questionLevel: z.enum(['EASY', 'MEDIUM', 'HARD', 'EXPERT']),\r\n  mark: z.number().min(1, 'Mark must be at least 1'),\r\n  questionOptions: z\r\n    .array(\r\n      z.object({\r\n        content: z.string().min(1, 'Option content is required'),\r\n        isCorrect: z.boolean()\r\n      })\r\n    )\r\n    .min(2, 'At least two answer options are required')\r\n    .refine((options) => options.some((option) => option.isCorrect), {\r\n      message: 'At least one correct answer is required',\r\n      path: ['questionOptions']\r\n    })\r\n})\r\n\r\nexport function AddQuestionForm({ onClose, quizId, onQuestionAdded }) {\r\n  const [questionType, setQuestionType] = useState('MultipleChoice')\r\n  const { toast } = useToast()\r\n  const [showErrors, setShowErrors] = useState(false)\r\n\r\n  const {\r\n    control,\r\n    handleSubmit,\r\n    formState: { errors },\r\n    watch,\r\n    setValue,\r\n    trigger\r\n  } = useForm({\r\n    resolver: zodResolver(questionSchema),\r\n    defaultValues: {\r\n      content: '',\r\n      isActive: true,\r\n      questionType: 'MultipleChoice',\r\n      questionLevel: 'EASY',\r\n      mark: 1,\r\n      questionOptions: [\r\n        { content: '', isCorrect: true },\r\n        { content: '', isCorrect: false }\r\n      ]\r\n    }\r\n  })\r\n\r\n  const { fields, append, remove } = useFieldArray({\r\n    control,\r\n    name: 'questionOptions'\r\n  })\r\n\r\n  const watchQuestionType = watch('questionType')\r\n  const watchQuestionOptions = watch('questionOptions')\r\n\r\n  useEffect(() => {\r\n    if (watchQuestionType === 'MultipleChoice') {\r\n      const correctAnswers = watchQuestionOptions.filter((option) => option.isCorrect)\r\n      if (correctAnswers.length > 1) {\r\n        const lastCorrectIndex = watchQuestionOptions.findIndex((option) => option.isCorrect)\r\n        watchQuestionOptions.forEach((_, index) => {\r\n          setValue(`questionOptions.${index}.isCorrect`, index === lastCorrectIndex)\r\n        })\r\n      }\r\n    }\r\n    trigger('questionOptions')\r\n  }, [watchQuestionType, watchQuestionOptions, setValue, trigger])\r\n\r\n  useEffect(() => {\r\n    if (watchQuestionOptions) {\r\n      setShowErrors(false) // Reset error display when options change\r\n      trigger('questionOptions')\r\n    }\r\n  }, [watchQuestionOptions, trigger])\r\n\r\n  const onSubmit = async (data) => {\r\n    setShowErrors(true)\r\n    if (Object.keys(errors).length > 0) {\r\n      return\r\n    }\r\n\r\n    const updatedQuestionOptions = data.questionOptions.map((option, index) => ({\r\n      ...option,\r\n      orderIndex: index\r\n    }))\r\n\r\n    const createQues = {\r\n      createQuestionDto: {\r\n        ...data,\r\n        questionOptions: updatedQuestionOptions\r\n      }\r\n    }\r\n\r\n    try {\r\n      await createQuestion(createQues, quizId)\r\n      toast({\r\n        title: 'Success',\r\n        description: 'Question created successfully',\r\n        duration: 1500\r\n      })\r\n      onQuestionAdded() // Call this function to trigger a reload of QuizDetail\r\n      onClose()\r\n    } catch (error) {}\r\n  }\r\n  return (\r\n    <Dialog open={true} onOpenChange={onClose}>\r\n      <DialogContent className='max-w-[500px] h-[600px] p-0 overflow-hidden flex flex-col'>\r\n        <DialogHeader className='px-6 py-4 border-b'>\r\n          <DialogTitle className='text-xl font-semibold'>Add New Question</DialogTitle>\r\n        </DialogHeader>\r\n\r\n        <ScrollArea className='flex-grow px-6 py-4'>\r\n          <form onSubmit={handleSubmit(onSubmit)} className='space-y-4'>\r\n            <div className='space-y-2'>\r\n              <Label htmlFor='content'>Question Content</Label>\r\n              <Controller\r\n                name='content'\r\n                control={control}\r\n                render={({ field }) => <Input id='content' {...field} placeholder='Enter your question here' />}\r\n              />\r\n              {showErrors && errors.content && <p className='text-sm text-red-500'>{errors.content.message}</p>}\r\n            </div>\r\n\r\n            <div className='flex items-center space-x-2'>\r\n              <Controller\r\n                name='isActive'\r\n                control={control}\r\n                render={({ field }) => <Switch id='isActive' checked={field.value} onCheckedChange={field.onChange} />}\r\n              />\r\n              <Label htmlFor='isActive'>Active</Label>\r\n            </div>\r\n\r\n            <div className='grid grid-cols-2 gap-4'>\r\n              <div className='space-y-2'>\r\n                <Label htmlFor='questionType'>Question Type</Label>\r\n                <Controller\r\n                  name='questionType'\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Select\r\n                      onValueChange={(value) => {\r\n                        field.onChange(value)\r\n                        setQuestionType(value)\r\n                      }}\r\n                      value={field.value}\r\n                    >\r\n                      <SelectTrigger id='questionType'>\r\n                        <SelectValue placeholder='Select type' />\r\n                      </SelectTrigger>\r\n                      <SelectContent>\r\n                        {QUESTION_TYPES.map((type) => (\r\n                          <SelectItem key={type} value={type}>\r\n                            {type}\r\n                          </SelectItem>\r\n                        ))}\r\n                      </SelectContent>\r\n                    </Select>\r\n                  )}\r\n                />\r\n              </div>\r\n\r\n              <div className='space-y-2'>\r\n                <Label htmlFor='questionLevel'>Difficulty Level</Label>\r\n                <Controller\r\n                  name='questionLevel'\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Select onValueChange={field.onChange} value={field.value}>\r\n                      <SelectTrigger id='questionLevel'>\r\n                        <SelectValue placeholder='Select level' />\r\n                      </SelectTrigger>\r\n                      <SelectContent>\r\n                        {QUESTION_LEVELS.map((level) => (\r\n                          <SelectItem key={level} value={level}>\r\n                            {level.charAt(0) + level.slice(1).toLowerCase()}\r\n                          </SelectItem>\r\n                        ))}\r\n                      </SelectContent>\r\n                    </Select>\r\n                  )}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className='space-y-2'>\r\n              <Label htmlFor='mark'>Mark</Label>\r\n              <Controller\r\n                name='mark'\r\n                control={control}\r\n                render={({ field }) => (\r\n                  <Input\r\n                    id='mark'\r\n                    type='number'\r\n                    {...field}\r\n                    onChange={(e) => field.onChange(parseInt(e.target.value))}\r\n                    min={1}\r\n                  />\r\n                )}\r\n              />\r\n              {showErrors && errors.mark && <p className='text-sm text-red-500'>{errors.mark.message}</p>}\r\n            </div>\r\n\r\n            {(questionType === 'MultipleChoice' || questionType === 'MultipleSelect') && (\r\n              <div className='space-y-2'>\r\n                <Label>Answer Options</Label>\r\n                <div className='max-h-[200px] overflow-y-auto pr-2'>\r\n                  {fields.map((field, index) => (\r\n                    <div key={field.id} className='flex flex-col gap-2 mb-2'>\r\n                      <div className='flex items-center gap-2'>\r\n                        <Controller\r\n                          name={`questionOptions.${index}.content`}\r\n                          control={control}\r\n                          render={({ field }) => (\r\n                            <Input {...field} placeholder={`Option ${index + 1}`} className='flex-1' />\r\n                          )}\r\n                        />\r\n                        <Controller\r\n                          name={`questionOptions.${index}.isCorrect`}\r\n                          control={control}\r\n                          render={({ field: { value, onChange } }) => (\r\n                            <Switch\r\n                              checked={value}\r\n                              onCheckedChange={(newValue) => {\r\n                                if (questionType === 'MultipleChoice' && newValue) {\r\n                                  watchQuestionOptions.forEach((_, i) => {\r\n                                    setValue(`questionOptions.${i}.isCorrect`, i === index)\r\n                                  })\r\n                                } else {\r\n                                  onChange(newValue)\r\n                                }\r\n                                trigger('questionOptions')\r\n                              }}\r\n                              className='mx-2'\r\n                            />\r\n                          )}\r\n                        />\r\n                        <Button\r\n                          type='button'\r\n                          variant='ghost'\r\n                          size='icon'\r\n                          onClick={() => remove(index)}\r\n                          className='h-8 w-8'\r\n                          disabled={fields.length <= 2}\r\n                        >\r\n                          <Trash2 className='h-4 w-4' />\r\n                        </Button>\r\n                      </div>\r\n                      {showErrors && errors.questionOptions?.[index]?.content && (\r\n                        <p className='text-sm text-red-500'>{errors.questionOptions[index].content.message}</p>\r\n                      )}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n                {showErrors && errors.questionOptions && 'root' in errors.questionOptions && (\r\n                  <p className='text-sm text-red-500'>{errors.questionOptions.root?.message}</p>\r\n                )}\r\n                <Button\r\n                  type='button'\r\n                  onClick={() => append({ content: '', isCorrect: false })}\r\n                  variant='outline'\r\n                  className='w-full mt-2'\r\n                >\r\n                  <Plus className='h-4 w-4 mr-2 mt-1' />\r\n                  Add Answer Option\r\n                </Button>\r\n              </div>\r\n            )}\r\n\r\n            {watchQuestionType === 'TrueFalse' && (\r\n              <div className='space-y-2'>\r\n                <Label>Correct Answer</Label>\r\n                <Controller\r\n                  name='questionOptions'\r\n                  control={control}\r\n                  defaultValue={[\r\n                    { content: 'True', isCorrect: true },\r\n                    { content: 'False', isCorrect: false }\r\n                  ]}\r\n                  render={({ field }) => (\r\n                    <Select\r\n                      onValueChange={(value) =>\r\n                        field.onChange([\r\n                          { content: 'True', isCorrect: value === 'True' },\r\n                          { content: 'False', isCorrect: value === 'False' }\r\n                        ])\r\n                      }\r\n                      defaultValue='True'\r\n                    >\r\n                      <SelectTrigger>\r\n                        <SelectValue placeholder='Select correct answer' />\r\n                      </SelectTrigger>\r\n                      <SelectContent>\r\n                        <SelectItem value='True'>True</SelectItem>\r\n                        <SelectItem value='False'>False</SelectItem>\r\n                      </SelectContent>\r\n                    </Select>\r\n                  )}\r\n                />\r\n              </div>\r\n            )}\r\n            {/* {watchQuestionType === 'CodeSnippet' && (\r\n              <Button type='button' variant='outline' className='w-full'>\r\n                Create Problem Code Question\r\n              </Button>\r\n            )} */}\r\n          </form>\r\n        </ScrollArea>\r\n\r\n        <DialogFooter className='px-6 py-4 border-t'>\r\n          <div className='flex justify-end space-x-2 w-full'>\r\n            <Button variant='outline' onClick={onClose}>\r\n              Cancel\r\n            </Button>\r\n            <Button\r\n              onClick={() => {\r\n                setShowErrors(true)\r\n                handleSubmit(onSubmit)()\r\n              }}\r\n            >\r\n              Add Question\r\n            </Button>\r\n          </div>\r\n        </DialogFooter>\r\n      </DialogContent>\r\n    </Dialog>\r\n  )\r\n}\r\n","'use client'\r\n\r\nimport React from 'react'\r\nimport { useForm, Controller, FormProvider } from 'react-hook-form'\r\nimport { zodResolver } from '@hookform/resolvers/zod'\r\nimport * as z from 'zod'\r\nimport { Button } from '@/components/ui/button'\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogDescription,\r\n  DialogFooter,\r\n  DialogHeader,\r\n  DialogTitle,\r\n  DialogClose\r\n} from '@/components/ui/dialog'\r\nimport { Input } from '@/components/ui/input'\r\nimport { Label } from '@/components/ui/label'\r\nimport { Switch } from '@/components/ui/switch'\r\nimport { Card, CardContent } from '@/components/ui/card'\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'\r\nimport { useToast } from '@/hooks/use-toast'\r\nimport { createQuizAssessment } from '@/services/api/quizApi'\r\nimport MarkdownFormField from '@/components/markdown-form-field'\r\n\r\n// Define the schema for form validation\r\nconst quizSchema = z\r\n  .object({\r\n    title: z.string().min(1, 'Title is required'),\r\n    description: z.string().min(1, 'Description is required'),\r\n    passingMark: z.coerce\r\n      .number()\r\n      .int('Passing mark must be an integer')\r\n      .min(1, 'Passing mark must be a non-negative integer'),\r\n    hasTimeLimit: z.boolean(),\r\n    timeLimit: z.coerce.number().int('Time limit must be an integer').optional(),\r\n    hasAttemptLimit: z.boolean(),\r\n    attemptLimit: z.coerce.number().int('Attempt limit must be an integer').optional(),\r\n    isActive: z.boolean(),\r\n    isRandomized: z.boolean(),\r\n    quizType: z.enum(['ASSESSMENT'])\r\n  })\r\n  .superRefine((data, ctx) => {\r\n    if (data.hasTimeLimit) {\r\n      if (data.timeLimit === undefined) {\r\n        ctx.addIssue({\r\n          code: z.ZodIssueCode.custom,\r\n          message: \"Time limit is required when 'Has Time Limit' is enabled\",\r\n          path: ['timeLimit']\r\n        })\r\n      } else if (data.timeLimit < 1) {\r\n        ctx.addIssue({\r\n          code: z.ZodIssueCode.custom,\r\n          message: 'Time limit must be at least 1 minute when enabled',\r\n          path: ['timeLimit']\r\n        })\r\n      }\r\n    }\r\n\r\n    if (data.hasAttemptLimit) {\r\n      if (data.attemptLimit === undefined) {\r\n        ctx.addIssue({\r\n          code: z.ZodIssueCode.custom,\r\n          message: \"Attempt limit is required when 'Has Attempt Limit' is enabled\",\r\n          path: ['attemptLimit']\r\n        })\r\n      } else if (data.attemptLimit < 1) {\r\n        ctx.addIssue({\r\n          code: z.ZodIssueCode.custom,\r\n          message: 'Attempt limit must be at least 1 when enabled',\r\n          path: ['attemptLimit']\r\n        })\r\n      }\r\n    }\r\n  })\r\n\r\nfunction QuizCreationForm({ isOpen, onOpenChange, onSubmit }) {\r\n  const methods = useForm({\r\n    resolver: zodResolver(quizSchema),\r\n    defaultValues: {\r\n      title: '',\r\n      description: '',\r\n      passingMark: 1,\r\n      hasTimeLimit: false,\r\n      timeLimit: 1,\r\n      hasAttemptLimit: false,\r\n      attemptLimit: 1,\r\n      isActive: true,\r\n      isRandomized: false,\r\n      quizType: 'ASSESSMENT'\r\n    }\r\n  })\r\n\r\n  const {\r\n    control,\r\n    handleSubmit,\r\n    watch,\r\n    formState: { errors, isSubmitting }\r\n  } = methods\r\n\r\n  const hasTimeLimit = watch('hasTimeLimit')\r\n  const hasAttemptLimit = watch('hasAttemptLimit')\r\n  const { toast } = useToast()\r\n\r\n  const handleFormSubmit = async (data) => {\r\n    try {\r\n      const quizData = {\r\n        createQuizDto: {\r\n          isActive: data.isActive,\r\n          isRandomized: data.isRandomized,\r\n          title: data.title,\r\n          description: data.description,\r\n          passingMark: data.passingMark,\r\n          timeLimit: data.hasTimeLimit ? data.timeLimit : undefined,\r\n          hasTimeLimit: data.hasTimeLimit,\r\n          attemptLimit: data.hasAttemptLimit ? data.attemptLimit : undefined,\r\n          hasAttemptLimit: data.hasAttemptLimit,\r\n          quizType: data.quizType\r\n        }\r\n      }\r\n      console.log(quizData)\r\n\r\n      const createdQuiz = await createQuizAssessment(quizData)\r\n      onSubmit(createdQuiz)\r\n      onOpenChange(false)\r\n      toast({\r\n        title: 'Quiz Created',\r\n        description: 'Your quiz has been successfully created.'\r\n      })\r\n    } catch (error) {\r\n      console.error('Error creating quiz:', error)\r\n      toast({\r\n        title: 'Error',\r\n        description: 'Failed to create quiz. Please try again.',\r\n        variant: 'destructive'\r\n      })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Dialog open={isOpen} onOpenChange={onOpenChange}>\r\n      <DialogContent className='sm:max-w-[900px] max-h-[90vh]'>\r\n        <DialogHeader>\r\n          <DialogTitle className='text-2xl font-bold'>Create Quiz</DialogTitle>\r\n          <DialogDescription>Fill in the details to create a new quiz.</DialogDescription>\r\n        </DialogHeader>\r\n        <FormProvider {...methods}>\r\n          <form onSubmit={handleSubmit(handleFormSubmit)}>\r\n            <div className='space-y-6 py-4 overflow-y-auto pr-6' style={{ maxHeight: 'calc(90vh - 200px)' }}>\r\n              <Card>\r\n                <CardContent className='pt-6'>\r\n                  <div className='grid grid-cols-2 gap-6'>\r\n                    <div className='space-y-2'>\r\n                      <Label htmlFor='title' className='text-sm font-medium'>\r\n                        Title\r\n                      </Label>\r\n                      <Controller\r\n                        name='title'\r\n                        control={control}\r\n                        render={({ field }) => <Input {...field} id='title' className='w-full' />}\r\n                      />\r\n                      {errors.title && <p className='text-sm text-red-500'>{errors.title.message}</p>}\r\n                    </div>\r\n                    <div className='space-y-2'>\r\n                      <Label htmlFor='passingMark' className='text-sm font-medium'>\r\n                        Passing Mark\r\n                      </Label>\r\n                      <Controller\r\n                        name='passingMark'\r\n                        control={control}\r\n                        render={({ field }) => <Input {...field} id='passingMark' type='number' className='w-full' />}\r\n                      />\r\n                      {errors.passingMark && <p className='text-sm text-red-500'>{errors.passingMark.message}</p>}\r\n                    </div>\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n\r\n              <Card>\r\n                <CardContent className='pt-6'>\r\n                  <div className='space-y-2'>\r\n                    <Label htmlFor='description' className='text-sm font-medium'>\r\n                      Description\r\n                    </Label>\r\n                    <MarkdownFormField\r\n                      control={control}\r\n                      name='description'\r\n                      label=''\r\n                      placeholder='Enter quiz description'\r\n                    />\r\n                    {errors.description && <p className='text-sm text-red-500'>{errors.description.message}</p>}\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n\r\n              <Card>\r\n                <CardContent className='pt-6'>\r\n                  <div className='grid grid-cols-2 gap-6'>\r\n                    <div className='space-y-4'>\r\n                      <div className='flex items-center justify-between'>\r\n                        <Label htmlFor='hasTimeLimit' className='text-sm font-medium'>\r\n                          Has Time Limit\r\n                        </Label>\r\n                        <Controller\r\n                          name='hasTimeLimit'\r\n                          control={control}\r\n                          render={({ field }) => <Switch checked={field.value} onCheckedChange={field.onChange} />}\r\n                        />\r\n                      </div>\r\n                      {hasTimeLimit && (\r\n                        <div className='space-y-2'>\r\n                          <Label htmlFor='timeLimit' className='text-sm font-medium'>\r\n                            Time Limit (minutes)\r\n                          </Label>\r\n                          <Controller\r\n                            name='timeLimit'\r\n                            control={control}\r\n                            render={({ field }) => <Input {...field} id='timeLimit' type='number' className='w-full' />}\r\n                          />\r\n                          {errors.timeLimit && <p className='text-sm text-red-500'>{errors.timeLimit.message}</p>}\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                    <div className='space-y-4'>\r\n                      <div className='flex items-center justify-between'>\r\n                        <Label htmlFor='hasAttemptLimit' className='text-sm font-medium'>\r\n                          Has Attempt Limit\r\n                        </Label>\r\n                        <Controller\r\n                          name='hasAttemptLimit'\r\n                          control={control}\r\n                          render={({ field }) => <Switch checked={field.value} onCheckedChange={field.onChange} />}\r\n                        />\r\n                      </div>\r\n                      {hasAttemptLimit && (\r\n                        <div className='space-y-2'>\r\n                          <Label htmlFor='attemptLimit' className='text-sm font-medium'>\r\n                            Attempt Limit\r\n                          </Label>\r\n                          <Controller\r\n                            name='attemptLimit'\r\n                            control={control}\r\n                            render={({ field }) => (\r\n                              <Input {...field} id='attemptLimit' type='number' className='w-full' />\r\n                            )}\r\n                          />\r\n                          {errors.attemptLimit && <p className='text-sm text-red-500'>{errors.attemptLimit.message}</p>}\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n\r\n              <Card>\r\n                <CardContent className='pt-6'>\r\n                  <div className='grid grid-cols-2 gap-6'>\r\n                    <div className='flex items-center justify-between'>\r\n                      <Label htmlFor='isActive' className='text-sm font-medium'>\r\n                        Is Active\r\n                      </Label>\r\n                      <Controller\r\n                        name='isActive'\r\n                        control={control}\r\n                        render={({ field }) => <Switch checked={field.value} onCheckedChange={field.onChange} />}\r\n                      />\r\n                    </div>\r\n                    <div className='flex items-center justify-between'>\r\n                      <Label htmlFor='isRandomized' className='text-sm font-medium'>\r\n                        Is Randomized\r\n                      </Label>\r\n                      <Controller\r\n                        name='isRandomized'\r\n                        control={control}\r\n                        render={({ field }) => <Switch checked={field.value} onCheckedChange={field.onChange} />}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n\r\n              <Card>\r\n                <CardContent className='pt-6'>\r\n                  <div className='space-y-2'>\r\n                    <Label htmlFor='quizType' className='text-sm font-medium'>\r\n                      Quiz Type\r\n                    </Label>\r\n                    <Controller\r\n                      name='quizType'\r\n                      control={control}\r\n                      render={({ field }) => (\r\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\r\n                          <SelectTrigger className='w-full'>\r\n                            <SelectValue placeholder='Select quiz type' />\r\n                          </SelectTrigger>\r\n                          <SelectContent>\r\n                            <SelectItem value='ASSESSMENT'>Assessment</SelectItem>\r\n                          </SelectContent>\r\n                        </Select>\r\n                      )}\r\n                    />\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n            </div>\r\n            <DialogFooter className='mt-6'>\r\n              <DialogClose asChild>\r\n                <Button type='button' variant='secondary'>\r\n                  Cancel\r\n                </Button>\r\n              </DialogClose>\r\n              <Button type='submit' disabled={isSubmitting}>\r\n                {isSubmitting ? 'Creating...' : 'Create Quiz'}\r\n              </Button>\r\n            </DialogFooter>\r\n          </form>\r\n        </FormProvider>\r\n      </DialogContent>\r\n    </Dialog>\r\n  )\r\n}\r\n\r\nexport { QuizCreationForm }\r\n","'use client'\r\n\r\nimport React, { useState, useEffect } from 'react'\r\nimport { useForm, useFieldArray, Controller } from 'react-hook-form'\r\nimport { zodResolver } from '@hookform/resolvers/zod'\r\nimport * as z from 'zod'\r\nimport { Button } from '@/components/ui/button'\r\nimport { Input } from '@/components/ui/input'\r\nimport { Label } from '@/components/ui/label'\r\nimport { Switch } from '@/components/ui/switch'\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'\r\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog'\r\nimport { ScrollArea } from '@/components/ui/scroll-area'\r\nimport { useToast } from '@/hooks/use-toast'\r\nimport { Trash2, Plus } from 'lucide-react'\r\nimport { updateQuestionById } from '@/services/api/questionApi'\r\n\r\nconst QUESTION_TYPES = ['MultipleChoice', 'MultipleSelect', 'TrueFalse']\r\nconst QUESTION_LEVELS = ['EASY', 'MEDIUM', 'HARD', 'EXPERT']\r\n\r\nconst questionSchema = z.object({\r\n  content: z.string().min(1, 'Content is required'),\r\n  isActive: z.boolean(),\r\n  questionType: z.enum(['MultipleChoice', 'MultipleSelect', 'TrueFalse', 'CodeSnippet']),\r\n  questionLevel: z.enum(['EASY', 'MEDIUM', 'HARD', 'EXPERT']),\r\n  mark: z.number().min(1, 'Mark must be at least 1'),\r\n  questionOptions: z\r\n    .array(\r\n      z.object({\r\n        content: z.string().min(1, 'Option content is required'),\r\n        isCorrect: z.boolean()\r\n      })\r\n    )\r\n    .min(2, 'At least two answer options are required')\r\n    .refine((options) => options.some((option) => option.isCorrect), {\r\n      message: 'At least one correct answer is required',\r\n      path: ['questionOptions']\r\n    })\r\n})\r\n\r\nexport function EditQuestionForm({ quizId, question, onSave, onCancel, onQuestionUpdated }) {\r\n  const { toast } = useToast()\r\n  const [showErrors, setShowErrors] = useState(false)\r\n  const [isSubmitting, setIsSubmitting] = useState(false)\r\n\r\n  const {\r\n    control,\r\n    handleSubmit,\r\n    formState: { errors },\r\n    watch,\r\n    setValue,\r\n    trigger\r\n  } = useForm({\r\n    resolver: zodResolver(questionSchema),\r\n    defaultValues: {\r\n      ...question,\r\n      questionOptions: question.questionOptions.map((option) => ({\r\n        content: option.content,\r\n        isCorrect: option.isCorrect\r\n      }))\r\n    }\r\n  })\r\n\r\n  const { fields, append, remove } = useFieldArray({\r\n    control,\r\n    name: 'questionOptions'\r\n  })\r\n\r\n  const watchQuestionType = watch('questionType')\r\n  const watchQuestionOptions = watch('questionOptions')\r\n\r\n  useEffect(() => {\r\n    if (watchQuestionType === 'MultipleChoice') {\r\n      const correctAnswers = watchQuestionOptions.filter((option) => option.isCorrect)\r\n      if (correctAnswers.length > 1) {\r\n        const lastCorrectIndex = watchQuestionOptions.findIndex((option) => option.isCorrect)\r\n        watchQuestionOptions.forEach((_, index) => {\r\n          setValue(`questionOptions.${index}.isCorrect`, index === lastCorrectIndex)\r\n        })\r\n      }\r\n    }\r\n    trigger('questionOptions')\r\n  }, [watchQuestionType, watchQuestionOptions, setValue, trigger])\r\n\r\n  useEffect(() => {\r\n    if (watchQuestionOptions) {\r\n      setShowErrors(false) // Reset error display when options change\r\n      trigger('questionOptions')\r\n    }\r\n  }, [watchQuestionOptions, trigger])\r\n\r\n  const onSubmit = async (data) => {\r\n    setShowErrors(true)\r\n    if (Object.keys(errors).length > 0) {\r\n      return\r\n    }\r\n\r\n    setIsSubmitting(true)\r\n\r\n    const updatedQuestionOptions = data.questionOptions.map((option, index) => ({\r\n      id: option.id,\r\n      content: option.content,\r\n      isCorrect: option.isCorrect,\r\n      orderIndex: index\r\n    }))\r\n\r\n    const updateQues = {\r\n      question: {\r\n        isActive: data.isActive,\r\n        content: data.content,\r\n        questionType: data.questionType,\r\n        questionLevel: data.questionLevel,\r\n        mark: data.mark,\r\n        problemId: question.problemId,\r\n        problem: question.problem,\r\n        questionOptions: updatedQuestionOptions\r\n      }\r\n    }\r\n\r\n    try {\r\n      const updatedQuestion = await updateQuestionById(quizId, question.id, updateQues)\r\n      toast({\r\n        title: 'Success',\r\n        description: 'Question updated successfully',\r\n        duration: 1500\r\n      })\r\n      onSave(updatedQuestion)\r\n      onQuestionUpdated()\r\n    } catch (error) {\r\n      toast({\r\n        title: 'Error',\r\n        description: error.message || 'Failed to update question',\r\n        variant: 'destructive',\r\n        duration: 1500\r\n      })\r\n    } finally {\r\n      setIsSubmitting(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Dialog open={true} onOpenChange={onCancel}>\r\n      <DialogContent className='max-w-[500px] h-[600px] p-0 overflow-hidden flex flex-col'>\r\n        <DialogHeader className='px-6 py-4 border-b'>\r\n          <DialogTitle className='text-xl font-semibold'>Edit Question</DialogTitle>\r\n        </DialogHeader>\r\n\r\n        <ScrollArea className='flex-grow px-6 py-4'>\r\n          <form onSubmit={handleSubmit(onSubmit)} className='space-y-4'>\r\n            <div className='space-y-2'>\r\n              <Label htmlFor='content'>Question Content</Label>\r\n              <Controller\r\n                name='content'\r\n                control={control}\r\n                render={({ field }) => <Input id='content' {...field} placeholder='Enter your question here' />}\r\n              />\r\n              {showErrors && errors.content && <p className='text-sm text-red-500'>{errors.content.message}</p>}\r\n            </div>\r\n\r\n            <div className='flex items-center space-x-2'>\r\n              <Controller\r\n                name='isActive'\r\n                control={control}\r\n                render={({ field }) => <Switch id='isActive' checked={field.value} onCheckedChange={field.onChange} />}\r\n              />\r\n              <Label htmlFor='isActive'>Active</Label>\r\n            </div>\r\n\r\n            <div className='grid grid-cols-2 gap-4'>\r\n              <div className='space-y-2'>\r\n                <Label htmlFor='questionType'>Question Type</Label>\r\n                <Controller\r\n                  name='questionType'\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Select onValueChange={field.onChange} value={field.value}>\r\n                      <SelectTrigger id='questionType'>\r\n                        <SelectValue placeholder='Select type' />\r\n                      </SelectTrigger>\r\n                      <SelectContent>\r\n                        {QUESTION_TYPES.map((type) => (\r\n                          <SelectItem key={type} value={type}>\r\n                            {type}\r\n                          </SelectItem>\r\n                        ))}\r\n                      </SelectContent>\r\n                    </Select>\r\n                  )}\r\n                />\r\n              </div>\r\n\r\n              <div className='space-y-2'>\r\n                <Label htmlFor='questionLevel'>Difficulty Level</Label>\r\n                <Controller\r\n                  name='questionLevel'\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Select onValueChange={field.onChange} value={field.value}>\r\n                      <SelectTrigger id='questionLevel'>\r\n                        <SelectValue placeholder='Select level' />\r\n                      </SelectTrigger>\r\n                      <SelectContent>\r\n                        {QUESTION_LEVELS.map((level) => (\r\n                          <SelectItem key={level} value={level}>\r\n                            {level.charAt(0) + level.slice(1).toLowerCase()}\r\n                          </SelectItem>\r\n                        ))}\r\n                      </SelectContent>\r\n                    </Select>\r\n                  )}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className='space-y-2'>\r\n              <Label htmlFor='mark'>Mark</Label>\r\n              <Controller\r\n                name='mark'\r\n                control={control}\r\n                render={({ field }) => (\r\n                  <Input\r\n                    id='mark'\r\n                    type='number'\r\n                    {...field}\r\n                    onChange={(e) => field.onChange(parseInt(e.target.value))}\r\n                    min={1}\r\n                  />\r\n                )}\r\n              />\r\n              {showErrors && errors.mark && <p className='text-sm text-red-500'>{errors.mark.message}</p>}\r\n            </div>\r\n\r\n            {(watchQuestionType === 'MultipleChoice' || watchQuestionType === 'MultipleSelect') && (\r\n              <div className='space-y-2'>\r\n                <Label>Answer Options</Label>\r\n                <div className='max-h-[200px] overflow-y-auto pr-2'>\r\n                  {fields.map((field, index) => (\r\n                    <div key={field.id} className='flex flex-col gap-2 mb-2'>\r\n                      <div className='flex items-center gap-2'>\r\n                        <Controller\r\n                          name={`questionOptions.${index}.content`}\r\n                          control={control}\r\n                          render={({ field }) => (\r\n                            <Input {...field} placeholder={`Option ${index + 1}`} className='flex-1' />\r\n                          )}\r\n                        />\r\n                        <Controller\r\n                          name={`questionOptions.${index}.isCorrect`}\r\n                          control={control}\r\n                          render={({ field: { value, onChange } }) => (\r\n                            <Switch\r\n                              checked={value}\r\n                              onCheckedChange={(newValue) => {\r\n                                if (watchQuestionType === 'MultipleChoice' && newValue) {\r\n                                  watchQuestionOptions.forEach((_, i) => {\r\n                                    setValue(`questionOptions.${i}.isCorrect`, i === index)\r\n                                  })\r\n                                } else {\r\n                                  onChange(newValue)\r\n                                }\r\n                                trigger('questionOptions')\r\n                              }}\r\n                              className='mx-2'\r\n                            />\r\n                          )}\r\n                        />\r\n                        <Button\r\n                          type='button'\r\n                          variant='ghost'\r\n                          size='icon'\r\n                          onClick={() => remove(index)}\r\n                          className='h-8 w-8'\r\n                          disabled={fields.length <= 2}\r\n                        >\r\n                          <Trash2 className='h-4 w-4' />\r\n                        </Button>\r\n                      </div>\r\n                      {showErrors && errors.questionOptions?.[index]?.content && (\r\n                        <p className='text-sm text-red-500'>{errors.questionOptions[index].content.message}</p>\r\n                      )}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n                {showErrors && errors.questionOptions && 'root' in errors.questionOptions && (\r\n                  <p className='text-sm text-red-500'>{errors.questionOptions.root?.message}</p>\r\n                )}\r\n                <Button\r\n                  type='button'\r\n                  onClick={() => append({ content: '', isCorrect: false })}\r\n                  variant='outline'\r\n                  className='w-full mt-2'\r\n                >\r\n                  <Plus className='h-4 w-4 mr-2' />\r\n                  Add Answer Option\r\n                </Button>\r\n              </div>\r\n            )}\r\n\r\n            {watchQuestionType === 'TrueFalse' && (\r\n              <div className='space-y-2'>\r\n                <Label>Correct Answer</Label>\r\n                <Controller\r\n                  name='questionOptions'\r\n                  control={control}\r\n                  defaultValue={[\r\n                    { content: 'True', isCorrect: true },\r\n                    { content: 'False', isCorrect: false }\r\n                  ]}\r\n                  render={({ field }) => (\r\n                    <Select\r\n                      onValueChange={(value) =>\r\n                        field.onChange([\r\n                          { content: 'True', isCorrect: value === 'True' },\r\n                          { content: 'False', isCorrect: value === 'False' }\r\n                        ])\r\n                      }\r\n                      defaultValue='True'\r\n                    >\r\n                      <SelectTrigger>\r\n                        <SelectValue placeholder='Select correct answer' />\r\n                      </SelectTrigger>\r\n                      <SelectContent>\r\n                        <SelectItem value='True'>True</SelectItem>\r\n                        <SelectItem value='False'>False</SelectItem>\r\n                      </SelectContent>\r\n                    </Select>\r\n                  )}\r\n                />\r\n              </div>\r\n            )}\r\n          </form>\r\n        </ScrollArea>\r\n\r\n        <DialogFooter className='px-6 py-4 border-t'>\r\n          <Button variant='outline' onClick={onCancel} disabled={isSubmitting}>\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            onClick={() => {\r\n              setShowErrors(true)\r\n              handleSubmit(onSubmit)()\r\n            }}\r\n            disabled={isSubmitting}\r\n          >\r\n            {isSubmitting ? 'Updating...' : 'Update Question'}\r\n          </Button>\r\n        </DialogFooter>\r\n      </DialogContent>\r\n    </Dialog>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Button } from '@/components/ui/button'\r\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion'\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\r\nimport { Badge } from '@/components/ui/badge'\r\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip'\r\nimport { Edit, Trash2, Code, FileQuestion, Info } from 'lucide-react'\r\nimport { getProblemById } from '@/services/api/problemApi'\r\nimport { EditQuestionForm } from './EditQuestionForm'\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogAction,\r\n  AlertDialogCancel,\r\n  AlertDialogContent,\r\n  AlertDialogDescription,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogTitle\r\n} from '@/components/ui/alert-dialog'\r\nexport function QuestionItem({ question, onEdit, onDelete, onToggleActive, quizId, onQuestionUpdated }) {\r\n  const [isEditing, setIsEditing] = useState(false)\r\n  const [problem, setProblem] = useState(null)\r\n  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false)\r\n\r\n  useEffect(() => {\r\n    if (question.questionType === 'CodeSnippet' && question.problemId) {\r\n      const fetchProblemById = async () => {\r\n        try {\r\n          const problem = await getProblemById(question.problemId)\r\n          setProblem(problem)\r\n        } catch (error) {\r\n          console.error('Error fetching problem details:', error)\r\n        }\r\n      }\r\n      fetchProblemById()\r\n    }\r\n  }, [question.questionType, question.problemId])\r\n\r\n  const handleEdit = () => {\r\n    setIsEditing(true)\r\n  }\r\n  const handleEditComplete = (editedQuestion) => {\r\n    onEdit(editedQuestion)\r\n    setIsEditing(false)\r\n  }\r\n\r\n  const handleDeleteClick = () => {\r\n    setShowDeleteConfirm(true)\r\n  }\r\n\r\n  const handleDeleteConfirm = () => {\r\n    onDelete(question.id)\r\n    setShowDeleteConfirm(false)\r\n  }\r\n\r\n  const handleDeleteCancel = () => {\r\n    setShowDeleteConfirm(false)\r\n  }\r\n\r\n  const handleProblemEdit = () => {\r\n    console.log('Editing problem:', problem.id)\r\n  }\r\n\r\n  const handleProblemDelete = () => {\r\n    console.log('Deleting problem:', problem.id)\r\n  }\r\n\r\n  const getQuestionTypeColor = (type) => {\r\n    switch (type) {\r\n      case 'CodeSnippet':\r\n        return 'bg-blue-100 text-blue-800 border-blue-300'\r\n      case 'MultipleChoice':\r\n        return 'bg-green-100 text-green-800 border-green-300'\r\n      case 'TrueFalse':\r\n        return 'bg-red-100 text-red-800 border-red-300'\r\n      case 'MultipleSelect':\r\n        return 'bg-yellow-100 text-yellow-800 border-yellow-300'\r\n      default:\r\n        return 'bg-gray-100 text-gray-800 border-gray-300'\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Card className='mb-4 overflow-hidden'>\r\n        <CardHeader className='space-y-0 pb-2'>\r\n          <div className='flex flex-col sm:flex-row sm:items-center sm:justify-between gap-2'>\r\n            <div className='flex items-center space-x-2'>\r\n              {question.questionType === 'CodeSnippet' ? (\r\n                <Code className='h-5 w-5 text-blue-500 flex-shrink-0' />\r\n              ) : (\r\n                <FileQuestion className='h-5 w-5 text-green-500 flex-shrink-0' />\r\n              )}\r\n              <CardTitle className='text-base sm:text-lg font-semibold line-clamp-2'>{question.content}</CardTitle>\r\n            </div>\r\n            <div className='flex items-center space-x-2'>\r\n              <TooltipProvider>\r\n                <Tooltip>\r\n                  <TooltipTrigger asChild>\r\n                    <Badge variant={question.isActive ? 'outline' : 'destructive'} className='text-xs'>\r\n                      {question.isActive ? 'Active' : 'Inactive'}\r\n                    </Badge>\r\n                  </TooltipTrigger>\r\n                  <TooltipContent>\r\n                    <p>Question status</p>\r\n                  </TooltipContent>\r\n                </Tooltip>\r\n              </TooltipProvider>\r\n\r\n              <Button variant='ghost' size='icon' onClick={handleEdit} aria-label='Edit question'>\r\n                <Edit className='h-4 w-4' />\r\n              </Button>\r\n              <Button variant='ghost' size='icon' onClick={handleDeleteClick} aria-label='Delete question'>\r\n                <Trash2 className='h-4 w-4' />\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className='flex flex-wrap items-center gap-3 mb-4'>\r\n            <div\r\n              className={`px-3 py-1 rounded-full text-xs font-semibold border ${getQuestionTypeColor(question.questionType)}`}\r\n            >\r\n              {question.questionType}\r\n            </div>\r\n            <div className='px-3 py-1 rounded-full text-xs font-semibold bg-white-100 text-purple-800 border border-purple-300'>\r\n              Level: {question.questionLevel}\r\n            </div>\r\n            <div className='px-3 py-1 rounded-full text-xs font-semibold bg-orange-100 text-orange-800 border border-orange-300'>\r\n              Mark: {question.mark}\r\n            </div>\r\n          </div>\r\n\r\n          <Accordion type='single' collapsible className='w-full'>\r\n            <AccordionItem value='details'>\r\n              <AccordionTrigger className='text-sm font-medium'>\r\n                <span className='flex items-center'>\r\n                  View Details\r\n                  <Info className='ml-2 h-4 w-4 text-muted-foreground' />\r\n                </span>\r\n              </AccordionTrigger>\r\n              <AccordionContent>\r\n                {question.questionType === 'CodeSnippet' && problem && (\r\n                  <Card className='mt-2 mb-4 bg-muted'>\r\n                    <CardHeader className='flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-2 sm:space-y-0 pb-2'>\r\n                      <CardTitle className='text-sm font-medium'>Problem: {problem.problemDto.title}</CardTitle>\r\n                      <div className='flex space-x-2'>\r\n                        <Button variant='ghost' size='sm' onClick={handleProblemEdit} className='h-8'>\r\n                          <Edit className='h-3 w-3 mr-1' />\r\n                          Edit\r\n                        </Button>\r\n                        <Button variant='ghost' size='sm' onClick={handleProblemDelete} className='h-8'>\r\n                          <Trash2 className='h-3 w-3 mr-1' />\r\n                          Delete\r\n                        </Button>\r\n                      </div>\r\n                    </CardHeader>\r\n                  </Card>\r\n                )}\r\n                {question.questionType !== 'CodeSnippet' && (\r\n                  <div className='space-y-2'>\r\n                    <p className='font-medium'>Answers:</p>\r\n                    <ul className='space-y-1'>\r\n                      {question.questionOptions.map((answer, index) => (\r\n                        <li\r\n                          key={index}\r\n                          className={`flex items-center space-x-2 ${answer.isCorrect ? 'text-green-600' : ''}`}\r\n                        >\r\n                          <span>{answer.isCorrect ? '✓' : '○'}</span>\r\n                          <span className='text-sm'>{answer.content}</span>\r\n                        </li>\r\n                      ))}\r\n                    </ul>\r\n                  </div>\r\n                )}\r\n              </AccordionContent>\r\n            </AccordionItem>\r\n          </Accordion>\r\n        </CardContent>\r\n      </Card>\r\n      {isEditing && (\r\n        <EditQuestionForm\r\n          quizId={quizId}\r\n          question={question}\r\n          onSave={handleEditComplete}\r\n          onCancel={() => setIsEditing(false)}\r\n          onQuestionUpdated={onQuestionUpdated}\r\n        />\r\n      )}\r\n      <AlertDialog open={showDeleteConfirm} onOpenChange={setShowDeleteConfirm}>\r\n        <AlertDialogContent>\r\n          <AlertDialogHeader>\r\n            <AlertDialogTitle>Are you sure you want to delete this question?</AlertDialogTitle>\r\n            <AlertDialogDescription>\r\n              This action cannot be undone. This will permanently delete the question and remove it from the quiz.\r\n            </AlertDialogDescription>\r\n          </AlertDialogHeader>\r\n          <AlertDialogFooter>\r\n            <AlertDialogCancel onClick={handleDeleteCancel}>Cancel</AlertDialogCancel>\r\n            <AlertDialogAction onClick={handleDeleteConfirm}>Delete</AlertDialogAction>\r\n          </AlertDialogFooter>\r\n        </AlertDialogContent>\r\n      </AlertDialog>\r\n    </>\r\n  )\r\n}\r\n\r\nQuestionItem.propTypes = {\r\n  question: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    content: PropTypes.string.isRequired,\r\n    isActive: PropTypes.bool.isRequired,\r\n    questionType: PropTypes.string.isRequired,\r\n    questionLevel: PropTypes.string.isRequired,\r\n    mark: PropTypes.number.isRequired,\r\n    questionOptions: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        content: PropTypes.string.isRequired,\r\n        isCorrect: PropTypes.bool.isRequired\r\n      })\r\n    ).isRequired,\r\n    problemId: PropTypes.string\r\n  }).isRequired,\r\n  onEdit: PropTypes.func.isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n  onToggleActive: PropTypes.func.isRequired\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { useNavigate } from '@tanstack/react-router'\r\nimport { ChevronLeft, Clock, RotateCcw, Plus, Loader2, FileQuestion, Award } from 'lucide-react'\r\nimport { Button } from '@/components/ui/button'\r\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card'\r\nimport { Switch } from '@/components/ui/switch'\r\nimport { AddQuestionForm } from './AddQuestionForm'\r\nimport { QuizCreationForm } from './QuizCreationForm'\r\nimport { QuestionItem } from './QuestionItem'\r\nimport { deleteQuestion } from '@/services/api/questionApi'\r\nimport { getQuizAssessment, createQuizAssessment } from '@/services/api/quizApi'\r\nimport { getFullQuizDetail } from '@/services/api/questionApi'\r\nimport { useToast } from '@/hooks/use-toast'\r\nimport { Badge } from '@/components/ui/badge'\r\nimport { Skeleton } from '@/components/ui/skeleton'\r\nexport default function QuizAssessment() {\r\n  const [showAddQuestionForm, setShowAddQuestionForm] = useState(false)\r\n  const [isUpdate, setIsUpdate] = useState(false)\r\n  const [quizId, setQuizId] = useState(null)\r\n  const [showCreateQuizForm, setShowCreateQuizForm] = useState(false)\r\n  const [quizAssessment, setQuizAssessment] = useState(null)\r\n  const [quizDetail, setQuizDetail] = useState(null)\r\n  const [isLoading, setIsLoading] = useState(true)\r\n  const { toast } = useToast()\r\n\r\n  useEffect(() => {\r\n    fetchQuizAssessment()\r\n  }, [])\r\n\r\n  const fetchQuizAssessment = async () => {\r\n    setIsLoading(true)\r\n    try {\r\n      const data = await getQuizAssessment()\r\n      setQuizAssessment(data)\r\n      setQuizId(data.quiz.id)\r\n      if (data && data.quiz && data.quiz.id) {\r\n        await fetchQuizDetail(data.quiz.id)\r\n      }\r\n    } catch (error) {\r\n      // Handle 404 gracefully\r\n      if (error?.response?.status === 404) {\r\n        setQuizAssessment(null)\r\n        setQuizDetail(null)\r\n        return\r\n      }\r\n      // Handle other errors\r\n      console.error('Error fetching quiz assessment:', error)\r\n      toast({\r\n        title: 'Error',\r\n        description: 'Failed to load quiz assessment. Please try again.',\r\n        variant: 'destructive'\r\n      })\r\n      setQuizAssessment(null)\r\n      setQuizDetail(null)\r\n    } finally {\r\n      setIsLoading(false)\r\n    }\r\n  }\r\n\r\n  const fetchQuizDetail = async (quizId) => {\r\n    setIsLoading(true)\r\n    try {\r\n      const detailData = await getFullQuizDetail(quizId)\r\n      setQuizDetail(detailData)\r\n    } catch (error) {\r\n      console.error('Error fetching quiz detail:', error)\r\n      toast({\r\n        title: 'Error',\r\n        description: 'Failed to load quiz details. Please try again.',\r\n        variant: 'destructive'\r\n      })\r\n    } finally {\r\n      setIsLoading(false)\r\n    }\r\n  }\r\n\r\n  const handleQuestionAdded = () => {\r\n    if (quizDetail && quizDetail.quiz && quizDetail.quiz.id) {\r\n      fetchQuizDetail(quizDetail.quiz.id)\r\n    }\r\n  }\r\n\r\n  const handleEditQuestion = (editedQuestion) => {\r\n    setQuizDetail((prev) => ({\r\n      ...prev,\r\n      quiz: {\r\n        ...prev.quiz,\r\n        questions: prev.quiz.questions.map((q) => (q.id === editedQuestion.id ? editedQuestion : q))\r\n      }\r\n    }))\r\n    setIsUpdate(!isUpdate)\r\n  }\r\n\r\n  const handleDeleteQuestion = async (questionId) => {\r\n    try {\r\n      await deleteQuestion(quizDetail.quiz.id, questionId)\r\n      await fetchQuizDetail(quizDetail.quiz.id)\r\n      toast({\r\n        title: 'Success',\r\n        description: 'Question deleted successfully',\r\n        duration: 1500\r\n      })\r\n    } catch (error) {\r\n      toast({\r\n        title: 'Error',\r\n        description: 'Failed to delete question. Please try again.',\r\n        variant: 'destructive',\r\n        duration: 1500\r\n      })\r\n    }\r\n  }\r\n\r\n  const handleToggleActive = (questionId) => {\r\n    setQuizDetail((prev) => ({\r\n      ...prev,\r\n      quiz: {\r\n        ...prev.quiz,\r\n        questions: prev.quiz.questions.map((q) => (q.id === questionId ? { ...q, isActive: !q.isActive } : q))\r\n      }\r\n    }))\r\n  }\r\n\r\n  const handleCreateQuiz = async (quizData) => {\r\n    try {\r\n      const createdQuiz = await createQuizAssessment(quizData)\r\n      setQuizAssessment(createdQuiz)\r\n      await fetchQuizDetail(createdQuiz.quiz.id)\r\n      setShowCreateQuizForm(false)\r\n      toast({\r\n        title: 'Success',\r\n        description: 'Quiz created successfully',\r\n        duration: 1500\r\n      })\r\n    } catch (error) {\r\n      console.error('Error creating quiz:', error)\r\n      toast({\r\n        title: 'Error',\r\n        description: 'Failed to create quiz. Please try again.',\r\n        variant: 'destructive',\r\n        duration: 1500\r\n      })\r\n    }\r\n  }\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className='container p-4 mx-auto space-y-6'>\r\n        <LoadingSkeleton />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className='container p-4 mx-auto space-y-6'>\r\n      {!quizDetail ? (\r\n        <Card>\r\n          <CardContent className='pt-6'>\r\n            <div className='text-center'>\r\n              <p className='mb-4 text-lg'>No Quiz Assessment found</p>\r\n              <Button onClick={() => setShowCreateQuizForm(true)}>\r\n                <Plus className='w-4 h-4 mr-2' />\r\n                Create Quiz Assessment\r\n              </Button>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      ) : (\r\n        <>\r\n          <Card className='w-full'>\r\n            <CardHeader className='pb-4'>\r\n              <div className='flex items-center justify-between'>\r\n                <CardTitle className='text-2xl font-bold'>{quizDetail.quiz.title}</CardTitle>\r\n                <Badge variant={quizDetail.quiz.isActive ? 'success' : 'secondary'}>\r\n                  {quizDetail.quiz.isActive ? 'Active' : 'Inactive'}\r\n                </Badge>\r\n              </div>\r\n            </CardHeader>\r\n            <CardContent className='pt-0'>\r\n              <div className='grid gap-6 md:grid-cols-2'>\r\n                <div className='space-y-4'>\r\n                  <div className='flex items-center space-x-3'>\r\n                    <div className='flex items-center justify-center w-10 h-10 rounded-full bg-muted'>\r\n                      <FileQuestion className='w-5 h-5 text-primary' />\r\n                    </div>\r\n                    <div className='space-y-1'>\r\n                      <p className='text-sm font-medium leading-none'>Quiz Type</p>\r\n                      <p className='text-sm text-muted-foreground'>{quizDetail.quiz.quizType}</p>\r\n                    </div>\r\n                  </div>\r\n                  <div className='flex items-center space-x-3'>\r\n                    <div className='flex items-center justify-center w-10 h-10 rounded-full bg-muted'>\r\n                      <Award className='w-5 h-5 text-primary' />\r\n                    </div>\r\n                    <div className='space-y-1'>\r\n                      <p className='text-sm font-medium leading-none'>Passing Mark</p>\r\n                      <p className='text-sm text-muted-foreground'>{quizDetail.quiz.passingMark}</p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className='space-y-4'>\r\n                  <div className='flex items-center justify-between'>\r\n                    <div className='flex items-center space-x-3'>\r\n                      <div className='flex items-center justify-center w-10 h-10 rounded-full bg-muted'>\r\n                        <Clock className='w-5 h-5 text-primary' />\r\n                      </div>\r\n                      <div className='space-y-1'>\r\n                        <p className='text-sm font-medium leading-none'>Time Limit</p>\r\n                        <p className='text-sm text-muted-foreground'>\r\n                          {quizDetail.quiz.hasTimeLimit ? `${quizDetail.quiz.timeLimit} minutes` : 'No limit'}\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                    <Switch checked={quizDetail.quiz.hasTimeLimit} />\r\n                  </div>\r\n                  <div className='flex items-center justify-between'>\r\n                    <div className='flex items-center space-x-3'>\r\n                      <div className='flex items-center justify-center w-10 h-10 rounded-full bg-muted'>\r\n                        <RotateCcw className='w-5 h-5 text-primary' />\r\n                      </div>\r\n                      <div className='space-y-1'>\r\n                        <p className='text-sm font-medium leading-none'>Attempt Limit</p>\r\n                        <p className='text-sm text-muted-foreground'>\r\n                          {quizDetail.quiz.hasAttemptLimit ? `${quizDetail.quiz.attemptLimit} attempts` : 'No limit'}\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                    <Switch checked={quizDetail.quiz.hasAttemptLimit} />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card className='md:col-span-2'>\r\n            <CardHeader className='flex flex-row items-center justify-between'>\r\n              <CardTitle>Questions</CardTitle>\r\n              <Button onClick={() => setShowAddQuestionForm(true)}>\r\n                <Plus className='w-4 h-4 mr-2' />\r\n                Add Question\r\n              </Button>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className='space-y-4'>\r\n                {quizDetail.quiz.questions.length > 0 ? (\r\n                  quizDetail.quiz.questions.map((question) => (\r\n                    <QuestionItem\r\n                      key={question.id}\r\n                      quizId={quizDetail.quiz.id}\r\n                      question={question}\r\n                      onEdit={handleEditQuestion}\r\n                      onDelete={handleDeleteQuestion}\r\n                      onToggleActive={handleToggleActive}\r\n                      onQuestionUpdated={handleQuestionAdded}\r\n                    />\r\n                  ))\r\n                ) : (\r\n                  <p className='text-center text-muted-foreground'>No questions added yet.</p>\r\n                )}\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </>\r\n      )}\r\n\r\n      {showAddQuestionForm && (\r\n        <div className='fixed inset-0 bg-background/80 backdrop-blur-sm z-50'>\r\n          <div className='container flex items-center justify-center h-full max-w-lg mx-auto'>\r\n            <Card className='w-full'>\r\n              <CardHeader>\r\n                <CardTitle>Add New Question</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <AddQuestionForm\r\n                  quizId={quizDetail.quiz.id}\r\n                  onQuestionAdded={handleQuestionAdded}\r\n                  onClose={() => setShowAddQuestionForm(false)}\r\n                />\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {showCreateQuizForm && (\r\n        <QuizCreationForm\r\n          isOpen={showCreateQuizForm}\r\n          onOpenChange={setShowCreateQuizForm}\r\n          onSubmit={handleCreateQuiz}\r\n        />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst LoadingSkeleton = () => (\r\n  <div className='space-y-6'>\r\n    <Skeleton className='w-40 h-10' />\r\n    <Card>\r\n      <CardHeader>\r\n        <Skeleton className='w-3/4 h-8' />\r\n      </CardHeader>\r\n      <CardContent className='grid gap-6 md:grid-cols-2'>\r\n        <div className='space-y-4'>\r\n          <Skeleton className='w-full h-6' />\r\n          <Skeleton className='w-full h-6' />\r\n        </div>\r\n        <div className='space-y-4'>\r\n          <Skeleton className='w-full h-6' />\r\n          <Skeleton className='w-full h-6' />\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n    <Card>\r\n      <CardHeader className='flex flex-row items-center justify-between'>\r\n        <Skeleton className='w-1/4 h-8' />\r\n        <Skeleton className='w-40 h-10' />\r\n      </CardHeader>\r\n      <CardContent>\r\n        <div className='space-y-4'>\r\n          {[1, 2, 3].map((i) => (\r\n            <Skeleton key={i} className='w-full h-24' />\r\n          ))}\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  </div>\r\n)\r\n"],"names":["QUESTION_TYPES","QUESTION_LEVELS","questionSchema","z.object","z.string","z.boolean","z.enum","z.number","z.array","options","option","AddQuestionForm","onClose","quizId","onQuestionAdded","questionType","setQuestionType","useState","toast","useToast","showErrors","setShowErrors","control","handleSubmit","errors","watch","setValue","trigger","useForm","zodResolver","fields","append","remove","useFieldArray","watchQuestionType","watchQuestionOptions","useEffect","lastCorrectIndex","_","index","onSubmit","data","updatedQuestionOptions","createQues","createQuestion","jsx","Dialog","jsxs","DialogContent","DialogHeader","DialogTitle","ScrollArea","Label","Controller","field","Input","Switch","Select","value","SelectTrigger","SelectValue","SelectContent","type","SelectItem","level","e","onChange","newValue","i","Button","Trash2","_b","_a","Plus","DialogFooter","quizSchema","z.coerce","ctx","z.ZodIssueCode","QuizCreationForm","isOpen","onOpenChange","methods","isSubmitting","hasTimeLimit","hasAttemptLimit","handleFormSubmit","quizData","createdQuiz","createQuizAssessment","error","DialogDescription","FormProvider","Card","CardContent","MarkdownFormField","DialogClose","EditQuestionForm","question","onSave","onCancel","onQuestionUpdated","setIsSubmitting","updateQues","updatedQuestion","updateQuestionById","QuestionItem","onEdit","onDelete","onToggleActive","isEditing","setIsEditing","problem","setProblem","showDeleteConfirm","setShowDeleteConfirm","getProblemById","handleEdit","handleEditComplete","editedQuestion","handleDeleteClick","handleDeleteConfirm","handleDeleteCancel","handleProblemEdit","handleProblemDelete","getQuestionTypeColor","Fragment","CardHeader","Code","FileQuestion","CardTitle","TooltipProvider","Tooltip","TooltipTrigger","Badge","TooltipContent","Edit","Accordion","AccordionItem","AccordionTrigger","Info","AccordionContent","answer","AlertDialog","AlertDialogContent","AlertDialogHeader","AlertDialogTitle","AlertDialogDescription","AlertDialogFooter","AlertDialogCancel","AlertDialogAction","PropTypes","QuizAssessment","showAddQuestionForm","setShowAddQuestionForm","isUpdate","setIsUpdate","setQuizId","showCreateQuizForm","setShowCreateQuizForm","quizAssessment","setQuizAssessment","quizDetail","setQuizDetail","isLoading","setIsLoading","fetchQuizAssessment","getQuizAssessment","fetchQuizDetail","detailData","getFullQuizDetail","handleQuestionAdded","handleEditQuestion","prev","q","handleDeleteQuestion","questionId","deleteQuestion","handleToggleActive","handleCreateQuiz","LoadingSkeleton","Award","Clock","RotateCcw","Skeleton"],"mappings":"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"}